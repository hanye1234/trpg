{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["ddf.cmd = {};\r\nchatlog = [];\r\n\r\nvar version = require('../../package.json').version;\r\n\r\nvar store = require('store');\r\nvar screenshot = require('./screenshot.js').generate;\r\nvar lang = \"Japanese\";\r\n\r\nrequire(\"./contextMenu/.loading.js\");\r\nrequire(\"./window/.loading.js\");\r\nrequire(\"./room_menu.js\");\r\n\r\nwindow_focus = true;\r\nrunning = false;\r\nwindow.onblur = function() { window_focus = false; }\r\nwindow.onfocus = function() { window_focus = true; }\r\n\r\nframe = 0;\r\nfunction titleAnimation(){\r\n  list = \"─／｜＼\";\r\n  if(window_focus){\r\n    document.title = \"どどんとふ\";\r\n    running = false;\r\n  }else{\r\n    frame = (frame + 1) % 4;\r\n    document.title = list[frame] + \" どどんとふ\";\r\n    setTimeout(titleAnimation, 300);\r\n  }\r\n}\r\n\r\nwindow.addEventListener('popstate', (e) =>  {\r\n  //console.log(e);\r\n});\r\nvar click = {x:0,y:0};\r\n\r\nddf.roomInfos = [];\r\nvar pageBuffer, diceRollBuffer, context;\r\nvar alermLoaded = false;\r\nvar alermPlayed = false;\r\nvar alermWait = false;\r\nvar alermBuffer = null;\r\n\r\nfunction playSound(buffer) {\r\n  if(ddf.roomState.playSound){\r\n    var source = context.createBufferSource();\r\n    source.buffer = buffer;\r\n    source.connect(context.destination);\r\n    source.start(0);\r\n  }\r\n}\r\n\r\n$(() => {\r\n  ddf.base_url = config.base_url;\r\n\r\n  window.AudioContext = window.AudioContext||window.webkitAudioContext;\r\n  context = new AudioContext();\r\n  var request = new XMLHttpRequest();\r\n  request.open('GET', \"sound/page.mp3\", true);\r\n  request.responseType = 'arraybuffer';\r\n  request.onload = function() {\r\n    context.decodeAudioData(request.response, function(buffer) {\r\n      pageBuffer = buffer;\r\n    });\r\n  }\r\n  request.send();\r\n  var request2 = new XMLHttpRequest();\r\n  request2.open('GET', \"sound/diceRoll.mp3\", true);\r\n  request2.responseType = 'arraybuffer';\r\n  request2.onload = function() {\r\n    context.decodeAudioData(request2.response, function(buffer) {\r\n      diceRollBuffer = buffer;\r\n    });\r\n  }\r\n  request2.send();\r\n  \r\n  ddf.dragOption = {\r\n    cancel: \".dragprev\",\r\n    start: (event) =>  {\r\n        click.x = event.clientX - (parseInt($(event.target).css(\"marginLeft\")) / 2) * ddf.roomState.zoom;\r\n        click.y = event.clientY - (parseInt($(event.target).css(\"marginTop\")) / 2) * ddf.roomState.zoom;\r\n    },\r\n    drag: (event, ui) =>  {\r\n      var zoom = ddf.roomState.zoom;\r\n\r\n      var original = ui.originalPosition;\r\n\r\n      ui.position = {\r\n          left: (event.clientX - click.x + original.left) / zoom,\r\n          top:  (event.clientY - click.y + original.top ) / zoom\r\n      };\r\n      if(ddf.roomState.viewStateInfo.isSnapMovablePiece){\r\n        if(ddf.roomState.mapData.isAlternately && ddf.roomState.mapData.gridInterval % 2 == 1){\r\n          if((Math.floor(ui.position.top / 50 / ddf.roomState.mapData.gridInterval) & 1)){\r\n            ui.position = {\r\n                left: ((Math.floor(ui.position.left / 25) | 1) ^ 1) * 25,\r\n                top: Math.floor(ui.position.top / 50) * 50\r\n            };\r\n          }else{\r\n            ui.position = {\r\n                left: (Math.floor(ui.position.left / 25) | 1) * 25,\r\n                top: Math.floor(ui.position.top / 50) * 50\r\n            };\r\n          }\r\n        }else{\r\n          ui.position = {\r\n              left: Math.floor(ui.position.left / 50) * 50,\r\n              top: Math.floor(ui.position.top / 50) * 50\r\n          };\r\n        }\r\n      }\r\n    },\r\n    stop: (event, ui) => {\r\n      character = ddf.characters[ui.helper.attr(\"id\")];\r\n      if(character){\r\n        data = character.data;\r\n        data.x = ui.position.left / 50;\r\n        data.y = ui.position.top / 50;\r\n        ddf.moveCharacter(data.imgId, data.x, data.y);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /*共通コンポーネント向け*/\r\n  $(\".draggable\").draggable({\r\n    cancel: \".dragprev, .draggableObj\",\r\n    stack: \".draggable\"\r\n  });\r\n  $(\".draggabletail\").draggable({\r\n    cancel: \".dragprev, .draggableObj\"\r\n  });\r\n\r\n  $(document).on('mouseover', \".mapMaskFrame.draggableObj\", (e) => {\r\n    $(\".mapMaskFrame.draggableObj\").css('zIndex', 35);\r\n    $(e.currentTarget).css('zIndex', 36);\r\n  });\r\n  $(document).on('mouseover', \".magicRangeFrame\", (e) => {\r\n    $(\".magicRangeFrame\").css('zIndex', 40);\r\n    $(e.currentTarget).css('zIndex', 41);\r\n  });\r\n  $(document).on('mouseover', \".mapMarkerFrame\", (e) => {\r\n    $(\".mapMarkerFrame\").css('zIndex', 45);\r\n    $(e.currentTarget).css('zIndex', 46);\r\n  });\r\n  $(document).on('mouseover', \".cardFrame\", (e) => {\r\n    $(\".cardFrame\").css('zIndex', 50);\r\n    $(e.currentTarget).css('zIndex', 51);\r\n  });\r\n  $(document).on('mouseover', \".characterFrame:not(.isHide)\", (e) => {\r\n    $(\".characterFrame:not(.isHide)\").css('zIndex', 55);\r\n    $(e.currentTarget).css('zIndex', 56);\r\n  });\r\n  $(document).on('mouseover', \".chitFrame\", (e) => {\r\n    $(\".chitFrame\").css('zIndex', 60);\r\n    $(e.currentTarget).css('zIndex', 61);\r\n  });\r\n  \r\n  $(\".resizable\").resizable({\r\n    ghost: true,\r\n    handles: 'n, e, s, w, ne, se, sw, nw'\r\n  });\r\n  $('.loader-inner').loaders();\r\n\r\n  $(document).on('click', \"#diceResult *\", (e) => {\r\n    $(\"#diceResult\").empty();\r\n  });\r\n  $(document).on('click', \"#characterCutIn img\", (e) => {\r\n    $(\"#characterCutIn\").empty();\r\n  });\r\n  \r\n  /*ページ移動の停止処理*/\r\n  window.onbeforeunload = (e) =>  {\r\n    e.returnValue = '他のページに移動しようとしています。\\n移動しますか？';\r\n  };\r\n  \r\n  getLoginInfo();\r\n  \r\n  /*待合室コマンド*/\r\n  \r\n  $(\"#btn_loginNumber\").on('click', (e) => {\r\n    $(\"#window_loginNumber\").show().css(\"zIndex\", 151);\r\n    $(\".draggable:not(#window_loginNumber)\").css(\"zIndex\", 150);\r\n  });\r\n  $(\"#window_loginNumber .btn\").on('click', (e) =>  {\r\n    $(\"#window_loginNumber\").hide();\r\n  });\r\n  \r\n  /*$(\"#btn_version\").on(\"click\", (e) => {\r\n  });*/\r\n  $(\"#btn_manual, #btn_manual2\").on('click', (e) => {\r\n    window.open(ddf.base_url + \"README.html\");\r\n  });\r\n  /*$(\"#btn_tutorial\").on(\"click\", (e) => {\r\n  });*/\r\n  $(\"#btn_site, #btn_site2\").on('click', () => {\r\n    window.open(\"http://www.dodontof.com/\");\r\n  });\r\n  \r\n  $(\"#btn_removePlayRoom\").on('click', (e) => {\r\n    removePlayRoom(parseInt($(\"#playRoomNo\").val().trim()));\r\n  });\r\n  \r\n  \r\n  $(\"#btn_createPlayRoom\").on('click', (e) => {\r\n    ddf.userState.room = -1;\r\n    $(\"#window_createPlayRoom\").show().css(\"zIndex\", 151);\r\n    $(\".draggable:not(#window_createPlayRoom)\").css(\"zIndex\", 150);\r\n  });\r\n  $(\"#createPlayRoom_create\").on('click', (e) => {\r\n    createPlayRoom();\r\n  });\r\n  $(\"#createPlayRoom_close\").on('click', (e) => {\r\n    $(\"#window_createPlayRoom\").hide();\r\n  });\r\n\r\n  $(\"#btn_login\").on('click', (e) => {\r\n    checkRoomStatus(parseInt($(\"#playRoomNo\").val()));\r\n  });\r\n\r\n  $(\"#playddf.roomInfos table\").tablesorter();\r\n\r\n  var mousewheelevent = 'onwheel' in document ? 'wheel' : 'onmousewheel' in document ? 'mousewheel' : 'DOMMouseScroll';\r\n  $(\"#mapSurface\").on(mousewheelevent,(e) => {\r\n      e.preventDefault();\r\n      var delta = e.originalEvent.deltaY ? -(e.originalEvent.deltaY) : e.originalEvent.wheelDelta ? e.originalEvent.wheelDelta : -(e.originalEvent.detail);\r\n      if (delta < 0){\r\n        ddf.cmd.setZoom(-0.1);\r\n      } else {\r\n        ddf.cmd.setZoom(0.1);\r\n      }\r\n  });\r\n  \r\n  $(\"#initiative table\").colResizable({partialRefresh: true});\r\n});\r\n\r\nddf.cmd.safeDragDestroy = () => {\r\n  try{\r\n    $(\".draggableObj\").draggable(\"destroy\");\r\n  }catch(e){}\r\n}\r\n\r\nddf.cmd.setZoom = setZoom;\r\nfunction setZoom(amount, relative = true){\r\n  if(relative){\r\n    ddf.roomState.zoom += amount;\r\n  }else{\r\n    ddf.roomState.zoom = amount;\r\n  }\r\n  ddf.roomState.zoom < 0.1 && (ddf.roomState.zoom = 0.1);\r\n  ddf.roomState.zoom > 3.0 && (ddf.roomState.zoom = 3.0);\r\n  $(\"#map\").css(\"transform\", \"scale(\"+ddf.roomState.zoom+\")\");\r\n}\r\n\r\nfunction getDiceBotInfos(){\r\n  return ddf.getDiceBotInfos().then((r)=>{\r\n    ddf.patterns = {};\r\n    ddf.info.diceBotInfos = r;\r\n  });\r\n}\r\n\r\nfunction getLoginInfo(){\r\n  return ddf.getLoginInfo().then((r) => {\r\n    ddf.info = r;\r\n    $(\"#mapChange_width\").attr(\"max\", ddf.info.mapMaxWidth);\r\n    $(\"#mapChange_height\").attr(\"max\", ddf.info.mapMaxHeight);\r\n    $(\"#loginMessage\").html(ddf.info.loginMessage);\r\n\r\n    if(store.get('userState')){\r\n      ddf.userState = store.get('userState');\r\n      ddf.userState.room = -1;\r\n      ddf.userState.backgroundColor = \"FFFFFF\";\r\n    }else{\r\n      ddf.userState = {\r\n        room: -1,\r\n        own: \"\\t\"+ddf.util.getUniqueId(),\r\n        name: ddf.info.defaultUserNames.length==0?\"ななしさん\":ddf.info.defaultUserNames[Math.random()*ddf.info.defaultUserNames.length|0],\r\n        fontSize: 10,\r\n        chatColor: \"000000\",\r\n        backgroundColor: \"FFFFFF\",\r\n        showTime: false,\r\n        chatPalette: []\r\n      };\r\n      saveUserState();\r\n    }\r\n\r\n    total = 0;\r\n    str = \"\";\r\n    for(item of ddf.info.loginUserCountList){\r\n      total += item[1];\r\n      str += \"No.\"+item[0]+\"：\"+item[1]+\"人<br>\";\r\n    }\r\n    $(\"#window_loginNumber .body\").html(str);\r\n    $(\"#btn_loginNumber\").text(\"現状：\"+ddf.info.loginUserCountList.length+\"／上限：\"+ddf.info.limitLoginCount+\"人\");\r\n    for(item of ddf.info.diceBotInfos){\r\n      $(\"#playRoomGameType\").append($('<option value=\"'+item.gameType+'\">'+item.name+'</option>'));\r\n    }\r\n    \r\n    $(\"#login_name\").val(ddf.userState.name);\r\n\r\n    ddf.cmd.getPlayRoomInfo();\r\n    return r;\r\n  });\r\n}\r\n\r\nddf.cmd.getPlayRoomInfo = getPlayRoomInfo;\r\nfunction getPlayRoomInfo(){\r\n  promises = [];\r\n  \r\n  if(matches = /(\\?|&)room=(\\d+)(&|$)/.exec(location.search)){\r\n    room = parseInt(matches[2]);\r\n    ddf.getPlayRoomInfo(room, room).then((r)=>{\r\n      ddf.roomInfos[room] = r.playRoomStates[0];\r\n      checkRoomStatus(room);\r\n    });\r\n  }else{\r\n    for(i = 0;i * ddf.info.playRoomGetRangeMax < ddf.info.playRoomMaxNumber;i++){\r\n      promises.push(\r\n        ddf.getPlayRoomInfo(i * ddf.info.playRoomGetRangeMax, ddf.info.playRoomGetRangeMax * (i+1) - 1 > ddf.info.playRoomMaxNumber ? ddf.info.playRoomMaxNumber : ddf.info.playRoomGetRangeMax * (i+1) - 1)\r\n      );\r\n    }\r\n\r\n    callback = (r) => {\r\n      roominfo = r;\r\n      for(key in roominfo.playRoomStates){\r\n        room = roominfo.playRoomStates[key];\r\n        ddf.roomInfos[parseInt(room.index.trim())] = room;\r\n        \r\n        var row = \"<tr>\";\r\n        row += `<td>${room.index}</td>`\r\n        row += `<td>${encode(room.playRoomName)}</td>`\r\n        row += `<td>${encode(ddf.util.getDiceBotName(room.gameType))}</td>`\r\n        row += `<td>${room.loginUsers.length}</td>`\r\n        row += `<td>${room.passwordLockState?\"有り\":\"--\"}</td>`;\r\n        row += `<td>${room.canVisit?\"可\":\"--\"}</td>`;\r\n        row += `<td>${room.lastUpdateTime?room.lastUpdateTime:\"\"}</td>`;\r\n        row += \"<td></td></tr>\";\r\n        tr = $(row);\r\n        button = $(\"<button>削除</button>\");\r\n        if(room.lastUpdateTime){\r\n          button.on('click', ((roomNumber) => {\r\n            return (e) => {\r\n              e.stopPropagation && e.stopPropagation();\r\n              removePlayRoom(roomNumber)\r\n            };\r\n          })(parseInt(room.index.trim()) ));\r\n        }else{\r\n          button.prop(\"disabled\", true);\r\n        }      \r\n        tr.children(\"td:last\").append(button);\r\n        $(\"#playddf.roomInfos tbody\").append(tr);\r\n        tr.on('dblclick', ((roomNumber) => {return (e) => {\r\n          checkRoomStatus(roomNumber);\r\n        }})(parseInt(room.index)));\r\n        tr.on('click', ((roomNumber) => {return (e) => {\r\n          $(\"#playRoomNo\").val(roomNumber);\r\n        }})(parseInt(room.index)));\r\n        $(\"#playRoomInfos table tbody\").append(tr);\r\n      }\r\n      $(\"#playddf.roomInfos table\").trigger('update');\r\n      return r;\r\n    };\r\n\r\n    promises.reduce((current, next) =>  {\r\n      var p = current.then((v) =>  {\r\n        return next;\r\n      });\r\n      p.then(callback);\r\n      return p;\r\n    }, Promise.resolve());\r\n    \r\n    $(\"#loading\").hide();\r\n  }\r\n}\r\n\r\nfunction createPlayRoom(){\r\n  ddf.createPlayRoom(\r\n    ddf.userState.room,\r\n    $(\"#playRoomName\").val(),\r\n    $(\"#playRoomPassword\").val(),\r\n    $(\"#playRoomGameType\").val(),\r\n    true,\r\n    false,\r\n    [\"雑談\"],\r\n    {\r\n      isCardPickUpVisible:false,\r\n      isChatPaletteVisible:false,\r\n      isSnapMovablePiece:true,\r\n      isCardHandleLogVisible:true,\r\n      isCounterRemoconVisible:false,\r\n      isStandingGraphicVisible:true,\r\n      isRotateMarkerVisible:true,\r\n      isDiceVisible:true,\r\n      isAdjustImageSize:true,\r\n      isChatVisible:true,\r\n      isGridVisible:true,\r\n      isInitiativeListVisible:true,\r\n      isPositionVisible:true,\r\n      isCutInVisible:true,\r\n      isResourceWindowVisible:false\r\n    },\r\n    \"\"\r\n  ).then((r) => {\r\n    if(r.resultText == \"OK\"){\r\n      ddf.getPlayRoomInfo(r.playRoomIndex, r.playRoomIndex).then(\r\n        ((roomNumber) => {\r\n          return (r) => {\r\n            ddf.roomInfos[roomNumber] = r.playRoomStates[0];\r\n            checkRoomStatus(roomNumber);\r\n          };\r\n        })(r.playRoomIndex)\r\n      );\r\n\r\n    }else{\r\n    }\r\n  });\r\n}\r\n\r\nddf.cmd.checkRoomStatus = checkRoomStatus;\r\nfunction checkRoomStatus(roomNumber, isVisit = null, password = null){\r\n  room = ddf.roomInfos[roomNumber];\r\n  if(room){\r\n    if(room.lastUpdateTime==\"\"){\r\n    /*ルーム未作成*/\r\n      ddf.userState.room = roomNumber;\r\n      $(\"#window_createPlayRoom\").show().css(\"zIndex\", 151);\r\n      $(\".draggable:not(#window_createPlayRoom)\").css(\"zIndex\", 150);\r\n    }else if((room.passwordLockState && password == null) || (room.canVisit && isVisit == null)){\r\n    /*見学可・パスワード付きルーム1回目*/\r\n      ddf.cmd.loginCheck_show(roomNumber);\r\n    }else{\r\n    /*ログイン*/\r\n      return ddf.checkRoomStatus(roomNumber, password).then((roominfo) => {\r\n        if(roominfo.isRoomExist){\r\n          ddf.userState.room = roominfo.roomNumber;\r\n          ddf.userState.name = $(\"#login_name\").val();\r\n          saveUserState();\r\n          if(roominfo.isWelComeMessageOn){\r\n            ddf.sendChatMessage(0, \"どどんとふ\\t\", \"「\"+ddf.userState.name+\"」がログインしました。（htmlddf \"+version+\"）\", \"00aa00\", true);\r\n          }\r\n          $(\"#main\").hide();\r\n          //history.pushState({roomNumber: roomNumber}, \"room=\"+roomNumber, \"index.html?room=\"+roomNumber);\r\n          $(\"#main2\").show();\r\n          $(\"#chatname\").val(ddf.userState.name);\r\n          ddf.userState.room = roominfo.roomNumber;\r\n          ddf.userState.lastUpdateTimes = {\r\n            effects: 0,\r\n            time: 0,\r\n            map: 0,\r\n            chatMessageDataLog: 0,\r\n            recordIndex: 0,\r\n            characters: 0,\r\n            playRoomInfo: 0,\r\n            record: 0\r\n          };\r\n          if(ddf.userState.chatPalette[ddf.base_url+roominfo.roomNumber]){\r\n            for(item in ddf.userState.chatPalette[ddf.base_url+roominfo.roomNumber]){\r\n              palette = ddf.userState.chatPalette[ddf.base_url+roominfo.roomNumber][item];\r\n              palette && $(\"#chatPalette_tabs\").append($(`<p id=\"${palette.tabName}\">${/^id/.test(palette.tabName)?$(\"#chatPalette_tabs p\").length+1:palette.tabName}</p>`))\r\n            }\r\n          }else{\r\n            item = {\r\n              tabName: \"id\"+ddf.util.getUniqueId(),\r\n              text: \"\",\r\n              name: \"\",\r\n              color: 0xFFFFFF\r\n            };\r\n            ddf.userState.chatPalette[ddf.base_url+roominfo.roomNumber] = [];\r\n            ddf.userState.chatPalette[ddf.base_url+roominfo.roomNumber][item.tabName] = item;\r\n            $(\"#chatPalette_tabs\").append($(`<p id=\"${item.tabName}\">1</p>`))\r\n\r\n            ddf.cmd.saveUserState();\r\n          }\r\n          $(\"#chatPalette_tabs > p:eq(0)\").click();\r\n          getDiceBotInfos();\r\n          ddf.characters = [];\r\n          ddf.roomState = {};\r\n          ddf.roomState.roomNumber = roomNumber;\r\n          ddf.roomState.zoom = 1;\r\n          ddf.roomState.roundTimeData = {};\r\n          ddf.roomState.ini_characters = [];\r\n          ddf.roomState.roundTimeData.counterNames = [];\r\n          ddf.userState.rIndex = 0;\r\n          var count = 0;\r\n          ddf.roomState.unread = [];\r\n          ddf.roomState.effects = [];\r\n          ddf.roomState.playSound = true;\r\n          ddf.roomState.chatChannelNames = roominfo.chatChannelNames;\r\n          ddf.roomState.viewStateInfo =  {\r\n            isCardPickUpVisible:false,\r\n            isChatPaletteVisible:false,\r\n            isSnapMovablePiece:true,\r\n            isCardHandleLogVisible:true,\r\n            isCounterRemoconVisible:false,\r\n            isStandingGraphicVisible:true,\r\n            isRotateMarkerVisible:true,\r\n            isDiceVisible:true,\r\n            isAdjustImageSize:true,\r\n            isChatVisible:true,\r\n            isGridVisible:true,\r\n            isInitiativeListVisible:true,\r\n            isPositionVisible:true,\r\n            isCutInVisible:true,\r\n            isResourceWindowVisible:false\r\n          };\r\n          for(tab of roominfo.chatChannelNames){\r\n            ddf.roomState.unread.push(0);\r\n            var obj = $(`<p>${encode(tab)}/<span class=\"tab_label\">0</span></p>`);\r\n            obj.on(\"click\", ((index) => {\r\n              return (e) => {\r\n                if(!$(e.currentTarget).hasClass(\"active\")){\r\n                  setChatTab(index)\r\n                }\r\n              }\r\n            })(count++));\r\n            $(\"#tab\").append(obj);\r\n            $(\"#log\").append($(\"<div><p></p></div>\"));\r\n          }\r\n          for(item of ddf.info.diceBotInfos){\r\n            if(/^[^:]*$/.test(item.gameType) && item.gameType != \"BaseDiceBot\"){\r\n              $(\"#dicebot, #diceBotTable_edit_gameType\").append($(`<option value=\"${encode(item.gameType)}\">${encode(item.name)}</option>`));\r\n            }\r\n          }\r\n          $(\"#log > div, #chattext\").css({\r\n            backgroundColor: \"#\"+ddf.userState.backgroundColor,\r\n            fontSize: ddf.userState.fontSize+\"pt\"\r\n          });\r\n          setChatTab(\"0\");\r\n          refresh();\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nddf.cmd.removePlayRoom = removePlayRoom;\r\nfunction removePlayRoom(roomNumber){\r\n  room = ddf.roomInfos[roomNumber];\r\n  if(room && room.lastUpdateTime){\r\n    if(room.passwordLockState){\r\n      ddf.cmd.roomDelete_show(roomNumber);\r\n    }else{\r\n      body = `No.${room.index}：${room.playRoomName}\\nを削除しますか？`;\r\n      if(password != null || confirm(body)){\r\n        ddf.removePlayRoom(roomNumber, false, password).then((r) => {\r\n          $(\"#playRoomInfos tbody\").empty();\r\n          ddf.cmd.getPlayRoomInfo();\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction setChatTab(index){\r\n  ddf.userState.channel = index;\r\n  $(\"#tab p.active, #log div.active\").removeClass('active');\r\n  $(`#tab p:eq(${index}), #log div:eq(${index})`).addClass('active');\r\n  ddf.roomState.unread[index] = 0;\r\n  $(`#tab p:eq(${index}) span`).text(0);\r\n}\r\n\r\nfunction refresh(){\r\n  ddf.refresh().then((r) => {\r\n    try{\r\n      refreshData = r;\r\n      //console.log(refreshData);\r\n      refreshData.lastUpdateTimes && (ddf.userState.lastUpdateTimes = refreshData.lastUpdateTimes);\r\n      if(refreshData.viewStateInfo){\r\n        ddf.roomState.viewStateInfo = refreshData.viewStateInfo;\r\n      }\r\n      if(refreshData.gameType){\r\n        if($(\"#dicebot\").children(`[value=${refreshData.gameType}]`).length==1){\r\n          $(\"#dicebot\").val($(refreshData.gameType));\r\n        }else{\r\n          $(\"#dicebot\").append($(`<option value=\"${encode(refreshData.gameType)}\">${encode(refreshData.gameType)}</option>`));\r\n          $(\"#dicebot\").val(refreshData.gameType);\r\n        }\r\n      }\r\n      if(refreshData.mapData) {\r\n        ddf.cmd.refresh_parseMapData(refreshData);\r\n      }\r\n      if(refreshData.characters){\r\n        refresh_parseCharacters(refreshData);\r\n      }\r\n      if(refreshData.roundTimeData){\r\n        refresh_parseRoundTimeData(refreshData);\r\n      }\r\n      if(refreshData.gameType){\r\n        ddf.roomState.gameType = refreshData.gameType;\r\n      }\r\n      if(refreshData.viewStateInfo){\r\n        refresh_parseViewStateInfo(refreshData);\r\n      }\r\n      if(refreshData.effects){\r\n        refresh_parseEffects(refreshData);\r\n      }\r\n      if(refreshData.chatChannelNames && !refreshData.isFirstChatRefresh){\r\n        $(`#tab > p:gt(${refreshData.chatChannelNames.length - 1}),#log > div:gt(${refreshData.chatChannelNames.length - 1})`).remove();\r\n        ddf.roomState.unread.splice(refreshData.chatChannelNames.length);\r\n        for(i = 0;i < refreshData.chatChannelNames.length;i++){\r\n          if(ddf.roomState.chatChannelNames.length <= i){\r\n            ddf.roomState.unread.push(0);\r\n            var obj = $(`<p>${encode(tab)}/<span class=\"tab_label\">0</span></p>`);\r\n            obj.on(\"click\", ((index) => {\r\n              return (e) => {\r\n                if(!$(e.currentTarget).hasClass(\"active\")){\r\n                  setChatTab(index)\r\n                }\r\n              }\r\n            })(i));\r\n            $(\"#tab\").append(obj);\r\n            $(\"#log\").append($(\"<div><p></p></div>\"));\r\n          }else{\r\n            $(`#tab:eq(${refreshData.chatChannelNames - 1})`).html(`${encode(refreshData.chatChannelNames[i])}/<span class=\"tab_label\">${ddf.roomState.unread[i]}</span>`);\r\n          }\r\n        }\r\n        if($(\"#tab .active\").length == 0){\r\n          setChatTab(0);\r\n        }\r\n        ddf.roomState.chatChannelNames = refreshData.chatChannelNames;\r\n      }\r\n      if(refreshData.chatMessageDataLog){\r\n        refresh_parseChatMessageDataLog(refreshData);\r\n      }\r\n      if(refreshData.record) {\r\n        ddf.cmd.refresh_parseRecordData(refreshData);\r\n      }\r\n      if(refreshData.gameType){\r\n        $(\"#dicebot\").val(refreshData.gameType);\r\n      }\r\n      if(refreshData.playRoomName){\r\n        ddf.roomState.playRoomName = refreshData.playRoomName;\r\n      }\r\n      if(refreshData.loginUserInfo){\r\n        ddf.roomState.loginUserInfo = refreshData.loginUserInfo;\r\n        $(\"#btn_member\").text(`ルームNo.${ddf.roomState.roomNumber}：${refreshData.loginUserInfo.length}名`);\r\n      }\r\n      r = refreshData = null;\r\n    }catch(e){\r\n      console.log(e);\r\n    }finally{\r\n      if(ddf.userState.room != -1){\r\n        setTimeout(refresh, ddf.info.refreshInterval * 1000);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction refresh_parseEffects(refreshData){\r\n  ddf.roomState.effects = refreshData.effects;\r\n  ddf.cmd.effectList_create();\r\n}\r\n\r\nfunction refresh_parseChatMessageDataLog(refreshData){\r\n  let prevheight = $(\"#log .active\")[0].scrollHeight - $(\"#log .active\").height();\r\n  lastRandResult = false;\r\n  lastCutIn = false;\r\n  sound = false;\r\n  for(item of refreshData.chatMessageDataLog){\r\n    if(item[0] <= ddf.roomState.lastMessageTime){continue;}\r\n    sound = true;\r\n    if(!window_focus && !running){\r\n      titleAnimation();\r\n    }\r\n    ddf.roomState.lastMessageTime = item[0];\r\n    if(matches = /^(.*)@([^@]+)@([^@]+)$/.exec(item[1].message)){\r\n      item[1].message = matches[1];\r\n      item[1].senderName = matches[2];\r\n      item[1].state = matches[3];\r\n    }else if(matches = /^(.*)@([^@]+)$/.exec(item[1].message)){\r\n      item[1].message = matches[1];\r\n      item[1].senderName = matches[2];\r\n    }else if(matches = /^(.*)\\t(.*)$/.exec(item[1].senderName)){\r\n      item[1].senderName = matches[1];\r\n      item[1].state = matches[2];\r\n    }\r\n    item[1].uniqueId != 'dummy' && (lastCutIn = [item[1].senderName, item[1].state]);\r\n    if(matches = /^###CutInCommand:([a-zA-Z]+)###(.+)$/.exec(item[1].message)){\r\n      switch(matches[1]){\r\n        case \"getDiceBotInfos\":\r\n            if(!refreshData.isFirstChatRefresh){\r\n              getDiceBotInfos();\r\n            }\r\n          continue;\r\n          break;\r\n        case \"rollVisualDice\":\r\n          param = JSON.parse(matches[2]);\r\n          $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:${encode(param.chatMessage).replace(/\\n/g, \"<br>\")}</p>`));\r\n          chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, param.chatMessage]);\r\n          $(`#log div:eq(${item[1].channel})`).hasClass(\"active\") || ddf.roomState.unread[item[1].channel]++;\r\n          lastRandResult = [param.chatMessage, param.randResults];\r\n          continue;\r\n          break;\r\n      }\r\n    }else if(matches = /^###CutInMovie###(.+)$/.exec(item[1].message)){\r\n      param = JSON.parse(matches[1]);\r\n      $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:【${encode(param.message)}】</p>`));\r\n      chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, param.chatMessage]);\r\n      $(`#log div:eq(${item[1].channel})`).hasClass(\"active\") || ddf.roomState.unread[item[1].channel]++;\r\n    }else if(matches = /^###vote###(.+)$/.exec(item[1].message)){\r\n      param = JSON.parse(matches[1]);\r\n      ddf.roomState.voting = {requiredCount:param.requiredCount, count: [0,0,0,0,0]};\r\n      if(param.isCallTheRoll){\r\n        $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:点呼開始！</p>`));\r\n        chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, \"点呼開始！\"]);\r\n        if(param.callerId != ddf.info.uniqueId && !refreshData.isFirstChatRefresh){\r\n          ddf.cmd.vote_alerm_show();\r\n        }\r\n      }else{\r\n        $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:投票を開始しました：${encode(param.question)}</p>`));\r\n        chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, `投票を開始しました：${encode(param.question)}`]);\r\n        if(param.callerId != ddf.info.uniqueId && !refreshData.isFirstChatRefresh){\r\n          ddf.cmd.vote_select_show(param.question);\r\n        }\r\n      }\r\n      $(`#log div:eq(${item[1].channel})`).hasClass(\"active\") || ddf.roomState.unread[item[1].channel]++;\r\n    }else if(matches = /^###vote_replay_readyOK###(.+)$/.exec(item[1].message)){\r\n      param = JSON.parse(matches[1]);\r\n      if(ddf.roomState.voting){\r\n        switch(param.voteReplay){\r\n          case 1:\r\n            ddf.roomState.voting.count[1]++;\r\n            totalCount = ddf.roomState.voting.count[1] + ddf.roomState.voting.count[2];\r\n            if(totalCount => ddf.roomState.voting.requiredCount){\r\n              $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:賛成。（${totalCount}/${ddf.roomState.voting.requiredCount}）<br>投票結果　賛成：${ddf.roomState.voting.count[1]}　反対：${ddf.roomState.voting.count[2]}</p>`));\r\n              chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, `賛成。（${totalCount}/${ddf.roomState.voting.requiredCount}）\\n投票結果　賛成：${ddf.roomState.voting.count[1]}　反対：${ddf.roomState.voting.count[2]}`]);\r\n              delete ddf.roomState.voting;\r\n            }else{\r\n              $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:賛成。（${totalCount}/${ddf.roomState.voting.requiredCount}）</p>`));\r\n              chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, `賛成。（${totalCount}/${ddf.roomState.voting.requiredCount}）`]);\r\n            }\r\n            break;\r\n          case 2:\r\n            ddf.roomState.voting.count[2]++;\r\n            totalCount = ddf.roomState.voting.count[1] + ddf.roomState.voting.count[2];\r\n            if(totalCount => ddf.roomState.voting.requiredCount){\r\n              $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:反対。（${totalCount}/${ddf.roomState.voting.requiredCount}）<br>投票結果　賛成：${ddf.roomState.voting.count[1]}　反対：${ddf.roomState.voting.count[2]}</p>`));\r\n              chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, `反対。（${totalCount}/${ddf.roomState.voting.requiredCount}）\\n投票結果　賛成：${ddf.roomState.voting.count[1]}　反対：${ddf.roomState.voting.count[2]}`]);\r\n              delete ddf.roomState.voting;\r\n            }else{\r\n              $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:反対。（${totalCount}/${ddf.roomState.voting.requiredCount}）</p>`));\r\n              chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, `反対。（${totalCount}/${ddf.roomState.voting.requiredCount}）`]);\r\n            }\r\n            break;\r\n          case 4:\r\n            ddf.roomState.voting.count[4]++;\r\n            totalCount = ddf.roomState.voting.count[4];\r\n            if(totalCount => ddf.roomState.voting.requiredCount){\r\n              $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:準備完了！（${totalCount}/${ddf.roomState.voting.requiredCount}）<br>全員準備完了しましたっ！</p>`));\r\n              chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, `準備完了！（${totalCount}/${ddf.roomState.voting.requiredCount}）\\n全員準備完了しましたっ！`]);\r\n              delete ddf.roomState.voting;\r\n            }else{\r\n              $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:準備完了！（${totalCount}/${ddf.roomState.voting.requiredCount}）</p>`));\r\n              chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, `準備完了！（${totalCount}/${ddf.roomState.voting.requiredCount}）`]);\r\n            }\r\n            break;\r\n        }\r\n      }\r\n      $(`#log div:eq(${item[1].channel})`).hasClass(\"active\") || ddf.roomState.unread[item[1].channel]++;\r\n    }else if(refreshData.refreshIndex > 0 && !!(matches = /^\\[アラーム発生：(.*)\\]:([^:]*)(:(.*)秒後)?$/.exec(item[1].message))){\r\n      if(matches[1] == \"（全員）\" || matches[1] == ddf.userState.name){\r\n        alermLoaded = false;\r\n        alermPlayed = false;\r\n        if(time = parseFloat(matches[4])>0){\r\n          alermWait = false;\r\n          setTimeout(()=>{\r\n            if(alermLoaded){\r\n              playSound(alermBuffer);\r\n              alermPlayed = true;\r\n            }else{\r\n              alermWait = true;\r\n            }\r\n          },time * 1000);\r\n        }else{\r\n          alermWait = true;\r\n        }\r\n        new Promise((success, error)=>{var request = new XMLHttpRequest();\r\n          request.open('GET', ddf.base_url + matches[2], true);\r\n          request.responseType = 'arraybuffer';\r\n          request.onload = success;\r\n          request.send();\r\n        }).then((r)=>{\r\n          context.decodeAudioData(r.target.response, function(buffer) {\r\n            alermBuffer = buffer;\r\n            alermLoaded = true;\r\n            if(alermWait){\r\n              playSound(alermBuffer);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:${item[1].message}</p>`));\r\n      chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, item[1].message]);\r\n      $(`#log div:eq(${item[1].channel})`).hasClass(\"active\") || ddf.roomState.unread[item[1].channel]++;\r\n    }else if(matches = /^(.*がファイルをアップロードしました)\\s*ファイル名：([^\\s]*)\\s*URL:(.*)$/.exec(item[1].message)){\r\n      $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:${encode(matches[1])}　<a href=\"${matches[3]}\" download=\"${matches[2]}\">${encode(matches[2])}</a></p>`));\r\n      chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, item[1].message]);\r\n      $(`#log div:eq(${item[1].channel})`).hasClass(\"active\") || ddf.roomState.unread[item[1].channel]++;\r\n    }else{\r\n      $(`#log div:eq(${item[1].channel})`).append($(`<p style=\"color: #${item[1].color}\">${ddf.userState.showTime?'<span class=\"time\">'+dateFormat(new Date(item[0]*1000), \"HH:MM\")+\"：</span>\":\"\"}${encode(item[1].senderName)}:${encode(item[1].message).replace(/\\n/g, \"<br>\")}</p>`));\r\n      chatlog.push([item[1].channel, ddf.roomState.chatChannelNames[item[1].channel], item[0],\"#\"+item[1].color,item[1].senderName, item[1].message]);\r\n      $(`#log div:eq(${item[1].channel})`).hasClass(\"active\") || ddf.roomState.unread[item[1].channel]++;\r\n    }\r\n  }\r\n  if(refreshData.isFirstChatRefresh){\r\n    for(div of $(\"#log\").children(\"div\")){\r\n      div.scrollTop = $(div).children(\":last\").offset().top;\r\n    }\r\n    ddf.roomState.unread = ddf.roomState.unread.map(()=>{return 0;});\r\n  }else{\r\n    if(prevheight < $(\"#log .active\").scrollTop()){\r\n      $(\"#log .active\").scrollTop($(\"#log .active\")[0].scrollHeight);\r\n    }\r\n    for(index in $(\"#tab\").children(\"p\")){\r\n      $(\"#tab\").children(\"p\").eq(index).children(\"span\").text(ddf.roomState.unread[index]);\r\n    }\r\n  }\r\n  if(lastCutIn){\r\n    let found = false;\r\n    if(!found){\r\n      for(item of ddf.roomState.effects){\r\n        if(item.type = \"standingGraphicInfos\"){\r\n          if(lastCutIn[0] == item.name && lastCutIn[1] == item.state){\r\n            $(\"#characterCutIn\").empty();\r\n            $(\"#characterCutIn\").append($(`<img src=\"${ddf.base_url + item.source}\" class=\"pos${item.leftIndex} ${item.motion} ${item.mirrored?\"mirrored\":\"\"}\">`));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if(!found){\r\n      for(id in ddf.characters){\r\n        character = ddf.characters[id].data;\r\n        if(character.name == lastCutIn[0]){\r\n            $(\"#characterCutIn\").empty();\r\n          $(\"#characterCutIn\").append($(`<img src=\"${ddf.base_url + character.imageName}\" class=\"pos1\">`));\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if(lastRandResult){\r\n    playSound(diceRollBuffer);\r\n    $(\"#diceResult\").empty();\r\n    for(item of lastRandResult[1]){\r\n      if([4,6,8,10,12,20].includes(item[1])){\r\n        $(\"#diceResult\").append($(`<img src=\"${ddf.base_url}image/diceImage/${item[1]}_dice/${item[1]}_dice[${item[0]}].png\" alt=\"${item[0]}\">`));\r\n      }else{\r\n        $(\"#diceResult\").append($(`<img src=\"${ddf.base_url}image/diceImage/unknown.png\" alt=\"${item[0]}\">`));\r\n      }\r\n    }\r\n    total = /\\s([^\\s]+)$/.exec(lastRandResult[0])[1];\r\n    $(\"#diceResult\").append($(`<div class=\"total\">${encode(total)}</div>`));\r\n  }else if(sound){\r\n    playSound(pageBuffer);\r\n  }\r\n}\r\n\r\nfunction refresh_parseViewStateInfo(refreshData){\r\n  for(key in refreshData.viewStateInfo){\r\n    switch(key){\r\n      case \"isSnapMovablePiece\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_gridguide\").addClass(\"checked\");\r\n        }\r\n        break;\r\n      case \"isAdjustImageSize\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_adjustcharacter\").addClass(\"checked\");\r\n          $(\"#characterCutIn\").addClass(\"adjust\");\r\n        }\r\n        break;\r\n      case \"isCardHandleLogVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_cardlog\").addClass(\"checked\");\r\n        }\r\n        break;\r\n      case \"isCardPickUpVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_cardpickup\").addClass(\"checked\");\r\n        }\r\n        break;\r\n      case \"isCutInVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displaycutin\").addClass(\"checked\");\r\n        }\r\n        break;\r\n      case \"isGridVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displaygridline\").addClass(\"checked\");\r\n        }\r\n        break;\r\n      case \"isPositionVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displaygridnum\").addClass(\"checked\");\r\n        }\r\n        break;\r\n      case \"isStandingGraphicVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displaycharacter\").addClass(\"checked\");\r\n\r\n          $(\"#characterCutIn\").show();\r\n        }else{\r\n          $(\"#characterCutIn\").hide();\r\n        }\r\n        break;\r\n      case \"isRotateMarkerVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_rotate\").addClass(\"checked\");\r\n        }\r\n        break;\r\n      case \"isChatVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displaychat\").addClass(\"checked\");\r\n          \r\n          $(\"#window_chat .inner\").show();\r\n        }else{\r\n          $(\"#window_chat .inner\").hide();\r\n        }\r\n        break;\r\n      case \"isDiceVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displaydice\").addClass(\"checked\");\r\n          \r\n          $(\"#diceResult\").show();\r\n        }else{\r\n          $(\"#diceResult\").hide();\r\n        }\r\n        break;\r\n      case \"isInitiativeListVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displayinitiative\").addClass(\"checked\");\r\n          \r\n          $(\"#initiative\").show();\r\n\r\n          $(\"#initiative table\").colResizable({partialRefresh: true});\r\n        }\r\n        break;\r\n      case \"isResourceWindowVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displayresource\").addClass(\"checked\");\r\n          \r\n          //$(\"#resource\").show();\r\n          /*TODO*/\r\n        }\r\n        break;\r\n      case \"isChatPaletteVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displaychatpalette\").addClass(\"checked\");\r\n          \r\n          $(\"#window_chatPalette\").show();\r\n        }\r\n        break;\r\n      case \"isCounterRemoconVisible\":\r\n        if(refreshData.viewStateInfo[key]){\r\n          $(\"#btn_displaycounter\").addClass(\"checked\");\r\n          \r\n          //$(\"#remocon\").show();\r\n          /*TODO*/\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nddf.cmd.refresh_parseRecordData = refresh_parseRecordData;\r\nfunction refresh_parseRecordData(refreshData){\r\n  ddf.cmd.safeDragDestroy();\r\n  iniChanged = false;\r\n  force = false;\r\n  for(record of refreshData.record){\r\n    switch(record[1]){\r\n    case \"addCharacter\":\r\n      force = true;\r\n    case \"changeCharacter\":\r\n      data = record[2][0];\r\n      character = ddf.characters[data.imgId];\r\n      if(!character){\r\n        refresh_parseCharacters({characters: [data]});\r\n        iniChanged = true;\r\n        continue;\r\n      }\r\n      obj = character.obj;\r\n      switch(data.type){\r\n        case \"magicRangeMarker\":\r\n          iniChanged = true;\r\n          obj.css({\r\n            left: data.x * 50,\r\n            top: data.y * 50,\r\n            clipPath: getPath(data.rangeType, data.feets / 5,ddf.roomState.mapData.gridInterval),\r\n            opacity: 0.5\r\n          });\r\n          obj.children(\"object\").attr(\"data\",`img/range.svg?radius=${data.feets}&color=${data.color}&gridInterval=${ddf.roomState.mapData.gridInterval}&direction=${data.rangeType}`);\r\n          obj.removeClass(\"rangeCenterMarker rangeTopMarker rangeLeftMarker rangeRightMarker rangeBottomMarker rangeTopLeftMarker rangeTopRightMarker rangeBottomLeftMarker rangeBottomRightMarker\");\r\n          if(!data.isHide){\r\n            ddf.roomState.ini_characters[character.data.imgId] = ddf.characters[character.data.imgId];\r\n          }else{\r\n            character.row && character.row.remove();\r\n            delete ddf.roomState.ini_characters[character.data.imgId];\r\n          }\r\n          switch(data.rangeType){\r\n            case \"circle\":\r\n              obj.addClass(\"rangeCenterMarker\");\r\n              obj.children(\"object\").css({\r\n                width: (data.feets * 20) * ddf.roomState.mapData.gridInterval,\r\n                height: (data.feets * 20) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              obj.css({\r\n                marginLeft: -(data.feets * 10 - 50) * ddf.roomState.mapData.gridInterval,\r\n                marginTop: -(data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              break;\r\n            case \"corn1\":\r\n              obj.addClass(\"rangeBottomLeftMarker\");\r\n              obj.children(\"object\").css({\r\n                width: (data.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n                height: (data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              obj.css({\r\n                marginLeft: 50 * ddf.roomState.mapData.gridInterval,\r\n                marginTop: -(data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              break;\r\n            case \"corn3\":\r\n              obj.addClass(\"rangeTopLeftMarker\");\r\n              obj.children(\"object\").css({\r\n                width: (data.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n                height: (data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              obj.css({\r\n                marginLeft: 50 * ddf.roomState.mapData.gridInterval,\r\n                marginTop: 0\r\n              });\r\n              break;\r\n            case \"corn5\":\r\n              obj.addClass(\"rangeTopRightMarker\");\r\n              obj.children(\"object\").css({\r\n                width: (data.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n                height: (data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              obj.css({\r\n                marginLeft: -(data.feets * 10 - 50) * ddf.roomState.mapData.gridInterval,\r\n                marginTop: 0\r\n              });\r\n              break;\r\n            case \"corn7\":\r\n              obj.addClass(\"rangeBottomRightMarker\");\r\n              obj.children(\"object\").css({\r\n                width: (data.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n                height: (data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              obj.css({\r\n                marginLeft: -(data.feets * 10 - 50) * ddf.roomState.mapData.gridInterval,\r\n                marginTop: -(data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              break;\r\n            case \"corn2\":\r\n              obj.addClass(\"rangeLeftMarker\");\r\n              obj.children(\"object\").css({\r\n                width: (data.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n                height: (Math.round(data.feets / 15 *2) * 100) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              obj.css({\r\n                marginLeft: 50 * ddf.roomState.mapData.gridInterval,\r\n                marginTop: -(Math.round(data.feets / 15 * 2) * 50) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              break;\r\n            case \"corn4\":\r\n              obj.addClass(\"rangeTopMarker\");\r\n              obj.children(\"object\").css({\r\n                width: (Math.round(data.feets / 15 *2) * 100) * ddf.roomState.mapData.gridInterval,\r\n                height: (data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              obj.css({\r\n                marginLeft: -(Math.round(data.feets / 15 * 2) * 50 -50) * ddf.roomState.mapData.gridInterval,\r\n                marginTop: 0\r\n              });\r\n              break;\r\n            case \"corn6\":\r\n              obj.addClass(\"rangeRightMarker\");\r\n              obj.children(\"object\").css({\r\n                width: (data.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n                height: (Math.round(data.feets / 15 *2) * 100) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              obj.css({\r\n                marginLeft: -(data.feets * 10 -50) * ddf.roomState.mapData.gridInterval,\r\n                marginTop: -(Math.round(data.feets / 15 * 2) * 50) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              break;\r\n            case \"corn8\":\r\n              obj.addClass(\"rangeBottomMarker\");\r\n              obj.children(\"object\").css({\r\n                width: (Math.round(data.feets / 15 *2) * 100) * ddf.roomState.mapData.gridInterval,\r\n                height: (data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              obj.css({\r\n                marginLeft: -(Math.round(data.feets / 15 * 2) * 50-50) * ddf.roomState.mapData.gridInterval,\r\n                marginTop: -(data.feets * 10) * ddf.roomState.mapData.gridInterval\r\n              });\r\n              break;\r\n          }\r\n          break;\r\n        case \"MetallicGuardianDamageRange\":\r\n          \r\n          obj.css({\r\n            clipPath: data.maxmaxRange < 2 ?\"\":`polygon(0 ${(data.maxRange * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                       0 ${(data.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px,\r\n                       ${(data.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px 0,\r\n                       ${(data.maxRange * 50) * ddf.roomState.mapData.gridInterval}px 0,\r\n                       ${(data.maxRange * 100 - 50) * ddf.roomState.mapData.gridInterval}px ${(data.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px,\r\n                       ${(data.maxRange * 100 - 50) * ddf.roomState.mapData.gridInterval}px ${(data.maxRange * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                       ${(data.maxRange * 50) * ddf.roomState.mapData.gridInterval}px ${(data.maxRange * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                       ${(data.maxRange * 50) * ddf.roomState.mapData.gridInterval}px ${(data.maxRange * 50 + 50) * ddf.roomState.mapData.gridInterval}px,\r\n                       ${(data.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px ${(data.maxRange * 50 + 50) * ddf.roomState.mapData.gridInterval}px,\r\n                       ${(data.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px ${(data.maxRange * 50) * ddf.roomState.mapData.gridInterval}px)`,\r\n            left: data.x * 50,\r\n            top: data.y * 50,\r\n            marginLeft: data.maxRange > 1 ? (data.maxRange * -50 + 50) * ddf.roomState.mapData.gridInterval: 0,\r\n            marginTop:  (data.maxRange * -50) * ddf.roomState.mapData.gridInterval,\r\n            opacity: 0.5,\r\n            transformOrigin: `center ${data.maxRange * 50 + 25}px`,\r\n            transform: `rotateZ(${data.rotation}deg)`\r\n          });\r\n          obj.children(\"object\").attr(\"data\", `img/rangeMG.svg?maxRange=${data.maxRange}&minRange=${data.minRange}&color=${data.color}&gridInterval=${ddf.roomState.mapData.gridInterval}`);\r\n          obj.children(\"object\").css({\r\n            width: (data.maxRange * 100 - 50) * ddf.roomState.mapData.gridInterval,\r\n            height: (data.maxRange * 50 + 50) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          break;\r\n        case \"LogHorizonRange\":\r\n          obj.css({\r\n          clipPath: `polygon(0 ${(data.range * 50 + 50) * ddf.roomState.mapData.gridInterval}px,\r\n                     0 ${(data.range * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                     ${(data.range * 50) * ddf.roomState.mapData.gridInterval}px 0,\r\n                     ${(data.range * 50 + 50) * ddf.roomState.mapData.gridInterval}px 0,\r\n                     ${(data.range * 100 + 50) * ddf.roomState.mapData.gridInterval}px ${(data.range * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                     ${(data.range * 100 + 50) * ddf.roomState.mapData.gridInterval}px ${(data.range * 50 + 50) * ddf.roomState.mapData.gridInterval}px,\r\n                     ${(data.range * 50 + 50) * ddf.roomState.mapData.gridInterval}px ${(data.range * 100 + 50) * ddf.roomState.mapData.gridInterval}px, \r\n                     ${(data.range * 50) * ddf.roomState.mapData.gridInterval}px ${(data.range * 100 + 50) * ddf.roomState.mapData.gridInterval}px)`,\r\n            left: data.x * 50,\r\n            top: data.y * 50,\r\n            marginLeft: (data.range * -50) * ddf.roomState.mapData.gridInterval,\r\n            marginTop:  (data.range * -50) * ddf.roomState.mapData.gridInterval,\r\n            width: (data.range * 100 + 50) * ddf.roomState.mapData.gridInterval,\r\n            height: (data.range * 100 + 50) * ddf.roomState.mapData.gridInterval,\r\n          });\r\n          obj.children(\"object\").attr(\"data\", `img/rangeLH.svg?size=${data.range}&color=${data.color}&gridInterval=${ddf.roomState.mapData.gridInterval}`);\r\n          obj.children(\"object\").css({\r\n            width: (data.range * 100 + 50) * ddf.roomState.mapData.gridInterval,\r\n            height: (data.range * 100 + 50) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          break;\r\n        case \"magicRangeMarkerDD4th\":\r\n          iniChanged = true;\r\n          obj.animate({\r\n            left: data.x * 50,\r\n            top: data.y * 50\r\n          }, 300);\r\n          if(!data.isHide){\r\n            ddf.roomState.ini_characters[character.data.imgId] = ddf.characters[character.data.imgId];\r\n          }else{\r\n            character.row && character.row.remove();\r\n            delete ddf.roomState.ini_characters[character.data.imgId];\r\n          }\r\n          obj.css({\r\n            backgroundColor: \"rgb(\"+[data.color / 65536 & 0xFF, data.color / 256 & 0xFF, data.color & 0xFF].join()+\")\"\r\n          });\r\n          switch(data.rangeType){\r\n            case \"closeBurstDD4th\":\r\n              obj.addClass(\"rangeCenterMarker\");\r\n              obj.css({\r\n                marginLeft: (data.feets * -10) * ddf.roomState.mapData.gridInterval,\r\n                marginTop:  (data.feets * -10) * ddf.roomState.mapData.gridInterval,\r\n                width: (data.feets * 20 + 50) * ddf.roomState.mapData.gridInterval,\r\n                height: (data.feets * 20 + 50) * ddf.roomState.mapData.gridInterval,\r\n              });\r\n              break;\r\n            case \"blastDD4th\":\r\n              obj.removeClass(\"rangeCenterMarker\");\r\n              obj.css({\r\n                marginLeft: 0,\r\n                marginTop:  0,\r\n                width: (data.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n                height: (data.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n              });\r\n          }\r\n          break;\r\n      case \"mapMask\":\r\n        obj.children(\".name\").text(data.name);\r\n        obj.animate({\r\n          left: data.x * 50,\r\n          top: data.y * 50\r\n        }, 300);\r\n        colors = [data.color / 65536 & 0xFF, data.color / 256 & 0xFF, data.color & 0xFF];\r\n        sum = 255;\r\n        refColor = [sum - colors[0], sum - colors[1], sum - colors[2]];\r\n        obj.css({\r\n          left: data.x * 50,\r\n          top: data.y * 50,\r\n          width: data.width * 50,\r\n          height: data.height * 50,\r\n          opacity: data.alpha,\r\n          backgroundColor: \"rgb(\"+colors+\")\"\r\n        });\r\n        obj.children(\".name\").css({\r\n          color: \"rgb(\"+refColor+\")\"\r\n        });\r\n        if(data.draggable){\r\n          obj.addClass(\"draggableObj\");\r\n        }else{\r\n          obj.removeClass(\"draggableObj\");\r\n        }\r\n        break;\r\n      case \"floorTile\":\r\n        obj.animate({\r\n          left: data.x * 50,\r\n          top: data.y * 50\r\n        }, 300);\r\n        obj.css({\r\n          width: data.width * 50,\r\n          height: data.height * 50\r\n        });\r\n        obj.children(\".inner\").css({\r\n          transform: \"rotateZ(\"+data.rotation+\"deg)\",\r\n          backgroundImage: \"url(\"+ddf.base_url+data.imageUrl+\")\"\r\n        });\r\n        if(data.draggable){\r\n          obj.addClass(\"draggableObj\");\r\n        }else{\r\n          obj.removeClass(\"draggableObj\");\r\n        }\r\n        break;\r\n      case \"MagicTimer\":\r\n        iniChanged = true;\r\n        ddf.roomState.ini_characters[character.data.imgId] = ddf.characters[character.data.imgId];\r\n        break;\r\n      case \"characterData\":\r\n        iniChanged = true;\r\n        obj.animate({\r\n          left: data.x * 50,\r\n          top: data.y * 50\r\n        }, 300);\r\n        obj.css({\r\n          width: data.size * 50,\r\n          height: data.size * 50\r\n        });\r\n        if(!data.isHide){\r\n          ddf.roomState.ini_characters[character.data.imgId] = ddf.characters[character.data.imgId];\r\n          obj.removeClass(\"isHide\");\r\n        }else{\r\n          character.row && character.row.remove();\r\n          delete ddf.roomState.ini_characters[character.data.imgId];\r\n          obj.addClass(\"isHide\");\r\n        }\r\n        obj.children(\".inner\").css({\r\n          transform: \"rotateZ(\"+data.rotation+\"deg) \"+(data.mirrored?\" rotateY(180deg)\":\"\"),\r\n          backgroundImage: \"url(\"+ddf.base_url+data.imageName+\")\"\r\n        });\r\n        obj.children(\".name\").text(data.name);\r\n        obj.children(\".dogtag\").text(data.dogTag);\r\n        break;\r\n      case \"chit\":\r\n        obj.animate({\r\n          left: data.x * 50,\r\n          top: data.y * 50\r\n        }, 300);\r\n        obj.css({\r\n          width: data.width * 50,\r\n          height: data.height * 50\r\n        });\r\n        obj.children(\".inner\").css({\r\n          backgroundImage: \"url(\"+ddf.base_url+data.imageUrl+\")\"\r\n        });\r\n        break;\r\n      case \"mapMarker\":\r\n        obj.children(\".message\").text(data.message);\r\n        obj.animate({\r\n          left: data.x * 50,\r\n          top: data.y * 50\r\n        }, 300);\r\n        colors = [data.color / 65536 & 0xFF, data.color / 256 & 0xFF, data.color & 0xFF];\r\n        sum = 255;\r\n        refColor = [sum - colors[0], sum - colors[1], sum - colors[2]];\r\n        obj.css({\r\n          left: data.x * 50,\r\n          top: data.y * 50,\r\n          width: data.width * 50,\r\n          height: data.height * 50,\r\n          backgroundColor: data.isPaint?\"rgb(\"+colors+\")\":\"\"\r\n        });\r\n        obj.children(\".message\").css({\r\n          color: \"rgb(\"+refColor+\")\"\r\n        });\r\n        if(data.draggable){\r\n          obj.addClass(\"draggableObj\");\r\n        }else{\r\n          obj.removeClass(\"draggableObj\");\r\n        }\r\n        break;\r\n      case \"Memo\":\r\n        title = data.message.split(\"\\r\")[0];\r\n        ar = data.message.split(/\\t\\|\\t/);\r\n        if(ar.length > 1){\r\n          body = ar.map((v)=>{return `[${v.split(\"\\r\")[0]}]`}).join(\"<br>\")\r\n        }else{\r\n          body = data.message.replace(\"\\r\", \"<br>\");\r\n        }\r\n        obj.html(`<span>${encode(title)}</span><img src=\"${ddf.base_url}img/memo2.png\"><div>${encode(body)}</div>`);\r\n      }\r\n      character.data = data;\r\n      break;\r\n    case \"removeCharacter\":\r\n      iniChanged = true;\r\n      data = record[2][0];\r\n      character = ddf.characters[data];\r\n      if(character){\r\n        character.obj && character.obj.remove();\r\n        character.row && character.row.remove();\r\n        delete ddf.characters[data[0]];\r\n        if(ddf.roomState.ini_characters[data[0]]){\r\n          delete ddf.roomState.ini_characters[data[0]];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  iniChanged && ddf.cmd.initiative_sort(force);\r\n  $(\".draggableObj\").draggable(ddf.dragOption);\r\n}\r\n\r\nfunction refresh_parseCharacters(refreshData){\r\n  for(character of refreshData.characters){\r\n    if(ddf.characters[character.imgId]){continue;}\r\n    switch(character.type){\r\n    case \"Card\":\r\n    case \"CardTrushMount\":\r\n    case \"CardMount\":\r\n      break;\r\n    case \"magicRangeMarker\":\r\n      obj = $(`<div class=\"magicRangeFrame draggableObj\" id=\"${character.imgId}\"><object type=\"image/svg+xml\" data=\"img/range.svg?radius=${character.feets}&color=${character.color}&gridInterval=${ddf.roomState.mapData.gridInterval}&direction=${character.rangeType}\"></div>`);\r\n      $(\"#mapSurface\").append(obj);\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      if(!character.isHide){\r\n        ddf.roomState.ini_characters[character.imgId] = ddf.characters[character.imgId];\r\n      }\r\n      obj.css({\r\n        left: character.x * 50,\r\n        top: character.y * 50,\r\n        clipPath: getPath(character.rangeType, character.feets / 5,ddf.roomState.mapData.gridInterval),\r\n        opacity: 0.5\r\n      });\r\n      switch(character.rangeType){\r\n        case \"circle\":\r\n          obj.addClass(\"rangeCenterMarker\");\r\n          obj.children(\"object\").css({\r\n            width: (character.feets * 20) * ddf.roomState.mapData.gridInterval,\r\n            height: (character.feets * 20) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          obj.css({\r\n            marginLeft: -(character.feets * 10 - 50) * ddf.roomState.mapData.gridInterval,\r\n            marginTop: -(character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          break;\r\n        case \"corn1\":\r\n          obj.addClass(\"rangeBottomLeftMarker\");\r\n          obj.children(\"object\").css({\r\n            width: (character.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n            height: (character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          obj.css({\r\n            marginLeft: 50 * ddf.roomState.mapData.gridInterval,\r\n            marginTop: -(character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          break;\r\n        case \"corn3\":\r\n          obj.addClass(\"rangeTopLeftMarker\");\r\n          obj.children(\"object\").css({\r\n            width: (character.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n            height: (character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          obj.css({\r\n            marginLeft: 50 * ddf.roomState.mapData.gridInterval,\r\n            marginTop: 0\r\n          });\r\n          break;\r\n        case \"corn5\":\r\n          obj.addClass(\"rangeTopRightMarker\");\r\n          obj.children(\"object\").css({\r\n            width: (character.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n            height: (character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          obj.css({\r\n            marginLeft: -(character.feets * 10 - 50) * ddf.roomState.mapData.gridInterval,\r\n            marginTop: 0\r\n          });\r\n          break;\r\n        case \"corn7\":\r\n          obj.addClass(\"rangeBottomRightMarker\");\r\n          obj.children(\"object\").css({\r\n            width: (character.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n            height: (character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          obj.css({\r\n            marginLeft: -(character.feets * 10 - 50) * ddf.roomState.mapData.gridInterval,\r\n            marginTop: -(character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          break;\r\n        case \"corn2\":\r\n          obj.addClass(\"rangeLeftMarker\");\r\n          obj.children(\"object\").css({\r\n            width: (character.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n            height: (Math.round(character.feets / 15 *2) * 100) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          obj.css({\r\n            marginLeft: 50 * ddf.roomState.mapData.gridInterval,\r\n            marginTop: -(Math.round(character.feets / 15 * 2) * 50) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          break;\r\n        case \"corn4\":\r\n          obj.addClass(\"rangeTopMarker\");\r\n          obj.children(\"object\").css({\r\n            width: (Math.round(character.feets / 15 *2) * 100) * ddf.roomState.mapData.gridInterval,\r\n            height: (character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          obj.css({\r\n            marginLeft: -(Math.round(character.feets / 15 * 2) * 50 -50) * ddf.roomState.mapData.gridInterval,\r\n            marginTop: 0\r\n          });\r\n          break;\r\n        case \"corn6\":\r\n          obj.addClass(\"rangeRightMarker\");\r\n          obj.children(\"object\").css({\r\n            width: (character.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n            height: (Math.round(character.feets / 15 *2) * 100) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          obj.css({\r\n            marginLeft: -(character.feets * 10 -50) * ddf.roomState.mapData.gridInterval,\r\n            marginTop: -(Math.round(character.feets / 15 * 2) * 50) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          break;\r\n        case \"corn8\":\r\n          obj.addClass(\"rangeBottomMarker\");\r\n          obj.children(\"object\").css({\r\n            width: (Math.round(character.feets / 15 *2) * 100) * ddf.roomState.mapData.gridInterval,\r\n            height: (character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          obj.css({\r\n            marginLeft: -(Math.round(character.feets / 15 * 2) * 50-50) * ddf.roomState.mapData.gridInterval,\r\n            marginTop: -(character.feets * 10) * ddf.roomState.mapData.gridInterval\r\n          });\r\n          break;\r\n      }\r\n      break;\r\n    case \"MetallicGuardianDamageRange\":\r\n      obj = $(`<div class=\"magicRangeFrame metallicGuardian draggableObj rangeBottomMarker\" id=\"${character.imgId}\"><object type=\"image/svg+xml\" data=\"img/rangeMG.svg?maxRange=${character.maxRange}&minRange=${character.minRange}&color=${character.color}&gridInterval=${ddf.roomState.mapData.gridInterval}\"></div>`);\r\n      $(\"#mapSurface\").append(obj);\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      obj.css({\r\n        clipPath: character.maxmaxRange < 2 ?\"\":`polygon(0 ${(character.maxRange * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   0 ${(character.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   ${(character.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px 0,\r\n                   ${(character.maxRange * 50) * ddf.roomState.mapData.gridInterval}px 0,\r\n                   ${(character.maxRange * 100 - 50) * ddf.roomState.mapData.gridInterval}px ${(character.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   ${(character.maxRange * 100 - 50) * ddf.roomState.mapData.gridInterval}px ${(character.maxRange * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   ${(character.maxRange * 50) * ddf.roomState.mapData.gridInterval}px ${(character.maxRange * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   ${(character.maxRange * 50) * ddf.roomState.mapData.gridInterval}px ${(character.maxRange * 50 + 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   ${(character.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px ${(character.maxRange * 50 + 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   ${(character.maxRange * 50 - 50) * ddf.roomState.mapData.gridInterval}px ${(character.maxRange * 50) * ddf.roomState.mapData.gridInterval}px)`,\r\n        left: character.x * 50,\r\n        top: character.y * 50,\r\n        marginLeft: character.maxRange > 1 ? (character.maxRange * -50 + 50) * ddf.roomState.mapData.gridInterval: 0,\r\n        marginTop:  (character.maxRange * -50) * ddf.roomState.mapData.gridInterval,\r\n        opacity: 0.5,\r\n        transformOrigin: `center ${character.maxRange * 50 + 25}px`,\r\n        transform: `rotateZ(${character.rotation}deg)`\r\n      });\r\n      obj.children(\"object\").css({\r\n        width: (character.maxRange * 100 - 50) * ddf.roomState.mapData.gridInterval,\r\n        height: (character.maxRange * 50 + 50) * ddf.roomState.mapData.gridInterval\r\n      });\r\n      break;\r\n    case \"LogHorizonRange\":\r\n      obj = $(`<div class=\"magicRangeFrame draggableObj rangeCenterMarker\" id=\"${character.imgId}\"><object type=\"image/svg+xml\" data=\"img/rangeLH.svg?size=${character.range}&color=${character.color}&gridInterval=${ddf.roomState.mapData.gridInterval}\"></div>`);\r\n      $(\"#mapSurface\").append(obj);\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      obj.css({\r\n        clipPath: `polygon(0 ${(character.range * 50 + 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   0 ${(character.range * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   ${(character.range * 50) * ddf.roomState.mapData.gridInterval}px 0,\r\n                   ${(character.range * 50 + 50) * ddf.roomState.mapData.gridInterval}px 0,\r\n                   ${(character.range * 100 + 50) * ddf.roomState.mapData.gridInterval}px ${(character.range * 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   ${(character.range * 100 + 50) * ddf.roomState.mapData.gridInterval}px ${(character.range * 50 + 50) * ddf.roomState.mapData.gridInterval}px,\r\n                   ${(character.range * 50 + 50) * ddf.roomState.mapData.gridInterval}px ${(character.range * 100 + 50) * ddf.roomState.mapData.gridInterval}px, \r\n                   ${(character.range * 50) * ddf.roomState.mapData.gridInterval}px ${(character.range * 100 + 50) * ddf.roomState.mapData.gridInterval}px)`,\r\n        left: character.x * 50,\r\n        top: character.y * 50,\r\n        marginLeft: (character.range * -50) * ddf.roomState.mapData.gridInterval,\r\n        marginTop:  (character.range * -50) * ddf.roomState.mapData.gridInterval,\r\n        opacity: 0.5\r\n      });\r\n      obj.children(\"object\").css({\r\n        width: (character.range * 100 + 50) * ddf.roomState.mapData.gridInterval,\r\n        height: (character.range * 100 + 50) * ddf.roomState.mapData.gridInterval\r\n      });\r\n      break;\r\n    case \"magicRangeMarkerDD4th\":\r\n      obj = $(`<div class=\"magicRangeFrame draggableObj\" id=\"${character.imgId}\"></div>`);\r\n      $(\"#mapSurface\").append(obj);\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      if(!character.isHide){\r\n        ddf.roomState.ini_characters[character.imgId] = ddf.characters[character.imgId];\r\n      }\r\n      obj.css({\r\n        left: character.x * 50,\r\n        top: character.y * 50,\r\n        opacity: 0.5,\r\n        backgroundColor: \"rgb(\"+[character.color / 65536 & 0xFF, character.color / 256 & 0xFF, character.color & 0xFF].join()+\")\"\r\n      });\r\n      switch(character.rangeType){\r\n        case \"closeBurstDD4th\":\r\n          obj.addClass(\"rangeCenterMarker\");\r\n          obj.css({\r\n            marginLeft: (character.feets * -10) * ddf.roomState.mapData.gridInterval,\r\n            marginTop:  (character.feets * -10) * ddf.roomState.mapData.gridInterval,\r\n            width: (character.feets * 20 + 50) * ddf.roomState.mapData.gridInterval,\r\n            height: (character.feets * 20 + 50) * ddf.roomState.mapData.gridInterval,\r\n          });\r\n          break;\r\n        case \"blastDD4th\":\r\n          obj.removeClass(\"rangeCenterMarker\");\r\n          obj.css({\r\n            marginLeft: 0,\r\n            marginTop:  0,\r\n            width: (character.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n            height: (character.feets * 10) * ddf.roomState.mapData.gridInterval,\r\n          });\r\n      }\r\n      break;\r\n    case \"mapMask\":\r\n      obj = $(`<div class=\"mapMaskFrame\" id=\"${character.imgId}\"></div>`);\r\n      if(character.draggable){obj.addClass(\"draggableObj\");}\r\n      obj.append($(`<div class=\"name\">${encode(character.name)}</div>`));\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      colors = [character.color / 65536 & 0xFF, character.color / 256 & 0xFF, character.color & 0xFF];\r\n      sum = 255;\r\n      refColor = [sum - colors[0], sum - colors[1], sum - colors[2]];\r\n      obj.css({\r\n        left: character.x * 50,\r\n        top: character.y * 50,\r\n        width: character.width * 50,\r\n        height: character.height * 50,\r\n        opacity: character.alpha,\r\n        backgroundColor: \"rgb(\"+colors+\")\"\r\n      });\r\n      obj.children(\".name\").css({\r\n        color: \"rgb(\"+refColor+\")\"\r\n      });\r\n      $(\"#mapSurface\").append(obj);\r\n      break;\r\n    case \"chit\":\r\n      obj = $(`<div class=\"chitFrame draggableObj\" id=\"${character.imgId}\"></div>`);\r\n      obj.append($(`<div class=\"inner\"></div>`));\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      obj.css({\r\n        left: character.x * 50,\r\n        top: character.y * 50,\r\n        width: character.width * 50,\r\n        height: character.height * 50\r\n      });\r\n      obj.children(\".inner\").css({\r\n        backgroundImage: \"url(\"+ddf.base_url+character.imageUrl+\")\"\r\n      });\r\n      $(\"#mapSurface\").append(obj);\r\n      break;\r\n    case \"floorTile\":\r\n      obj = $(`<div class=\"floorTileFrame dragprev\" id=\"${character.imgId}\"></div>`);\r\n      if(character.draggable){obj.addClass(\"draggableObj\");}\r\n      obj.append($(`<div class=\"inner\"></div>`));\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      obj.css({\r\n        left: character.x * 50,\r\n        top: character.y * 50,\r\n        width: character.width * 50,\r\n        height: character.height * 50\r\n      });\r\n      obj.children(\".inner\").css({\r\n        transform: \"rotateZ(\"+character.rotation+\"deg) \",\r\n        backgroundImage: \"url(\"+ddf.base_url+character.imageUrl+\")\"\r\n      });\r\n      $(\"#mapSurface\").append(obj);\r\n      break;\r\n    case \"MagicTimer\":\r\n      ddf.characters[character.imgId] = {\r\n        data: character\r\n      };\r\n      ddf.roomState.ini_characters[character.imgId] = ddf.characters[character.imgId];\r\n      break;\r\n    case \"characterData\":\r\n      obj = $(`<div class=\"characterFrame draggableObj\" id=\"${character.imgId}\"></div>`);\r\n      obj.append($(`<div class=\"inner\"></div><div class=\"dogtag\">${encode(character.dogTag)}</div><div class=\"name\">${encode(character.name)}</div>`));\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      if(!character.isHide){\r\n        ddf.roomState.ini_characters[character.imgId] = ddf.characters[character.imgId];\r\n      }else{\r\n        obj.addClass(\"isHide\");\r\n      }\r\n      obj.css({\r\n        left: character.x * 50,\r\n        top: character.y * 50,\r\n        width: character.size * 50,\r\n        height: character.size * 50\r\n      });\r\n      obj.children(\".inner\").css({\r\n        transform: \"rotateZ(\"+character.rotation+\"deg) \"+(character.mirrored?\" rotateY(180deg)\":\"\"),\r\n        backgroundImage: \"url(\"+ddf.base_url+character.imageName+\")\"\r\n      });\r\n      $(\"#mapSurface\").append(obj);\r\n      break;\r\n    case \"mapMarker\":\r\n      obj = $(`<div class=\"mapMarkerFrame\" id=\"${character.imgId}\"></div>`);\r\n      if(character.draggable){obj.addClass(\"draggableObj\");}\r\n      obj.append($(`<div class=\"message\">${encode(character.message)}</div>`));\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      colors = [character.color / 65536 & 0xFF, character.color / 256 & 0xFF, character.color & 0xFF];\r\n      sum = 255;\r\n      refColor = [sum - colors[0], sum - colors[1], sum - colors[2]];\r\n      obj.css({\r\n        left: character.x * 50,\r\n        top: character.y * 50,\r\n        width: character.width * 50,\r\n        height: character.height * 50,\r\n        backgroundColor: character.isPaint?\"rgb(\"+colors+\")\":\"\"\r\n      });\r\n      obj.children(\".message\").css({\r\n        color: \"rgb(\"+refColor+\")\"\r\n      });\r\n      $(\"#mapSurface\").append(obj);\r\n      break;\r\n    case \"Memo\":\r\n      title = character.message.split(\"\\r\")[0];\r\n      ar = character.message.split(/\\t\\|\\t/);\r\n      if(ar.length > 1){\r\n        body = ar.map((v)=>{return `[${v.split(\"\\r\")[0]}]`}).join(\"<br>\")\r\n      }else{\r\n        body = character.message.replace(\"\\r\", \"<br>\");\r\n      }\r\n      obj = $(`<div class=\"draggableObj\" id=\"${character.imgId}\"><span>${encode(title)}</span><img src=\"${ddf.base_url}image/memo2.png\"><div>${encode(body)}</div></div>`);\r\n      $(\"#list_memo\").append(obj);\r\n      ddf.characters[character.imgId] = {\r\n        obj: obj,\r\n        data: character\r\n      };\r\n      break;\r\n    }\r\n  }\r\n  $(\".draggableObj\").draggable(ddf.dragOption);\r\n}\r\n\r\nddf.cmd.refresh_parseMapData = refresh_parseMapData;\r\nfunction refresh_parseMapData(refreshData){\r\n  ddf.roomState.mapData = refreshData.mapData;\r\n  switch(refreshData.mapData.mapType){\r\n    case \"imageGraphic\":\r\n    $(\"#mapimg\").attr(\"src\", ddf.base_url + refreshData.mapData.imageSource)\r\n    .css({\r\n      width: refreshData.mapData.xMax * 50,\r\n      height: refreshData.mapData.yMax * 50,\r\n    });\r\n    if(refreshData.mapData.mirrored){\r\n      $(\"#mapimg\").addClass(\"mirrored\");\r\n    }else{\r\n      $(\"#mapimg\").removeClass(\"mirrored\");\r\n    }\r\n    $(\"#map\")\r\n    .css({\r\n      width: refreshData.mapData.xMax * 50,\r\n      height: refreshData.mapData.yMax * 50,\r\n    });\r\n    param = {\r\n      x: refreshData.mapData.xMax,\r\n      y: refreshData.mapData.yMax,\r\n      border: ddf.roomState.viewStateInfo.isGridVisible,\r\n      alt: refreshData.mapData.isAlternately,\r\n      num: ddf.roomState.viewStateInfo.isPositionVisible,\r\n      size: refreshData.mapData.gridInterval,\r\n      color: \"rgb(\"+[refreshData.mapData.gridColor / 65536 & 0xFF,refreshData.mapData.gridColor / 256 & 0xFF,refreshData.mapData.gridColor & 0xFF].join()+\")\",\r\n      mapMarks: refreshData.mapData.mapMarks?refreshData.mapData.mapMarks.join(\"/\"):\"\",\r\n      mapMarksAlpha: refreshData.mapData.mapMarksAlpha!=null?refreshData.mapData.mapMarksAlpha:1\r\n    };\r\n    $(\"#mapGrid\").attr(\"data\", \"img/grid.svg?\"+$.map(param, (v,k) => {return k+\"=\"+v;}).join(\"&\"));\r\n  }\r\n  if(refreshData.mapData.drawsImage && refreshData.mapData.drawsImage != \"\"){\r\n    $(\"#mapDraw\").show();\r\n    $(\"#mapDraw\").attr(\"src\", ddf.base_url + refreshData.mapData.drawsImage);\r\n  }else{\r\n    $(\"#mapDraw\").hide();\r\n  }\r\n  if(refreshData.mapData.draws){\r\n    $(\"#drawsPanel\").attr(\"data\", \"img/draw.svg?width=\"+refreshData.mapData.xMax * 50+\"&height=\" + refreshData.mapData.yMax * 50 + \"&list=\"+JSON.stringify(refreshData.mapData.draws));\r\n  }else{\r\n    $(\"#drawsPanel param\").val(\"[]\");\r\n  }\r\n  redraw = [];\r\n  for(item in ddf.characters){\r\n    if(ddf.characters[item].data.type == \"magicRangeMarker\" ||\r\n       ddf.characters[item].data.type == \"magicRangeMarkerDD4th\" ||\r\n       ddf.characters[item].data.type == \"LogHorizonRange\" ||\r\n       ddf.characters[item].data.type == \"MetallicGuardianDamageRange\"){\r\n      redraw.push([0, \"changeCharacter\", [ddf.characters[item].data], \"dummy\\t\"]);\r\n    }\r\n  }\r\n  ddf.cmd.refresh_parseRecordData({record: redraw});\r\n}\r\n\r\nddf.cmd.refresh_parseRoundTimeData = refresh_parseRoundTimeData;\r\nfunction refresh_parseRoundTimeData(refreshData, force = false){\r\n  if(force || JSON.stringify(refreshData.roundTimeData.counterNames) != JSON.stringify(ddf.roomState.roundTimeData.counterNames)){\r\n    ddf.roomState.roundTimeData = refreshData.roundTimeData;\r\n    $(\"#initiative table thead tr\").empty();\r\n    $(\"#initiative table thead tr\").append($(\"<th><p>順番</p></th>\"));\r\n    $(\"#initiative table thead tr\").append($(\"<th><p>イニシアティブ</p></th>\"));\r\n    $(\"#initiative table thead tr\").append($(\"<th><p>修正値</p></th>\"));\r\n    $(\"#initiative table thead tr\").append($(\"<th><p>名前</p></th>\"));\r\n    for(counter of ddf.roomState.roundTimeData.counterNames){\r\n      $(\"#initiative table thead tr\").append($(`<th><p>${encode(counter.replace(/^\\*/, \"\"))}</p></th>`));\r\n    }\r\n    $(\"#initiative table thead tr\").append($(\"<th><p>その他</p></th>\"));\r\n    \r\n    $(\"#initiative table tbody\").empty();\r\n    ddf.roomState.ini_characters = ddf.util.hashSort(ddf.roomState.ini_characters, (obj) => {return obj.data.initiative});\r\n    for(key in ddf.roomState.ini_characters){\r\n      var character = ddf.roomState.ini_characters[key];\r\n      var tmp = `<tr id=\"${character.data.imgId}\">`;\r\n      if(character.data.type != \"characterData\" && character.data.createRound && character.data.timeRange){\r\n        if(parseInt(character.data.createRound) + parseInt(character.data.timeRange) <= ddf.roomState.roundTimeData.round){\r\n          tmp+= `<td>${(character.data.initiative==ddf.roomState.roundTimeData.initiative?\"×\":\"\")}</td>`;\r\n        }else{\r\n          tmp+= `<td>${(character.data.initiative==ddf.roomState.roundTimeData.initiative?\"●\":\"\")}</td>`;\r\n        }\r\n      }else{\r\n        tmp+= `<td>${(character.data.initiative==ddf.roomState.roundTimeData.initiative?\"●\":\"\")}</td>`;\r\n      }\r\n      if(character.data.initiative < 0 && Math.round((character.data.initiative % 1)*10) >= -0.1){\r\n        tmp+= `<td><input class=\"initiative\" type=\"number\" value=\"${Math.ceil(character.data.initiative)}\"></td>`;\r\n        tmp+= `<td><input class=\"initiative2\" type=\"number\" value=\"${Math.round(character.data.initiative*100 % 100)}\" min=\"-10\" max=\"89\"></td>`;\r\n      }else if(character.data.initiative < 0){\r\n        tmp+= `<td><input class=\"initiative\" type=\"number\" value=\"${Math.floor(character.data.initiative)}\"></td>`;\r\n        tmp+= `<td><input class=\"initiative2\" type=\"number\" value=\"${Math.round(character.data.initiative*100 % 100)+100}\" min=\"-10\" max=\"89\"></td>`;\r\n      }else if(Math.round((character.data.initiative % 1) * 10) >= 9){\r\n        tmp+= `<td><input class=\"initiative\" type=\"number\" value=\"${Math.ceil(character.data.initiative)}\"></td>`;\r\n        tmp+= `<td><input class=\"initiative2\" type=\"number\" value=\"${Math.round(character.data.initiative*100 % 100 - 100)}\" min=\"-10\" max=\"89\"></td>`;\r\n      }else{\r\n        tmp+= `<td><input class=\"initiative\" type=\"number\" value=\"${Math.floor(character.data.initiative)}\"></td>`;\r\n        tmp+= `<td><input class=\"initiative2\" type=\"number\" value=\"${Math.round(character.data.initiative*100 % 100)}\" min=\"-10\" max=\"89\"></td>`;\r\n      }\r\n      tmp+= `<td>${encode(character.data.name)}</td>`;\r\n      count = 0;\r\n      for(counter of ddf.roomState.roundTimeData.counterNames){\r\n        character.data.counters == null && (character.data.counters = {});\r\n        character.data.statusAlias == null && (character.data.statusAlias = {});\r\n        character.data.counters[counter]==undefined && (character.data.counters[counter] = 0);\r\n        if(/^\\*/.test(counter)){\r\n          if(character.data.type != \"characterData\"){\r\n            tmp+= `<td><input class=\"v${count}\" type=\"checkbox\" disabled></td>`;\r\n          }else if(character.data.statusAlias && character.data.statusAlias[counter]){\r\n            tmp+= `<td><input class=\"v${count}\" type=\"checkbox\" ${(character.data.counters[counter]!=0?\"checked\":\"\")}>${character.data.statusAlias[counter]?character.data.statusAlias[counter]:\"\"}</td>`;\r\n          }else{\r\n            tmp+= `<td><input class=\"v${count}\" type=\"checkbox\" ${(character.data.counters[counter]!=0?\"checked\":\"\")}></td>`;\r\n          }\r\n        }else{\r\n          tmp+= `<td><input class=\"v${count}\" type=\"number\" value=\"${(character.data.counters[counter])}\"></td>`;\r\n        }\r\n        count++;\r\n      }\r\n      tmp+= `<td><input value=\"${encode(character.data.info)}\" class=\"info\"></td>`;\r\n      tmp+= \"</tr>\";\r\n      character.row = $(tmp);\r\n      if($(\"#initiative table tbody tr\").length > 0){\r\n        $(\"#initiative table tbody tr:eq(0)\").before(\r\n          character.row\r\n        );\r\n      }else{\r\n        $(\"#initiative table tbody\").append(\r\n          character.row\r\n        );\r\n      }\r\n      if(character.data.type != \"characterData\" && character.data.createRound && character.data.timeRange){\r\n        if(parseInt(character.data.createRound) + parseInt(character.data.timeRange) < ddf.roomState.roundTimeData.round ||\r\n          (parseInt(character.data.createRound) + parseInt(character.data.timeRange) == ddf.roomState.roundTimeData.round &&\r\n           parseFloat(character.data.initiative) >= ddf.roomState.roundTimeData.initiative)){\r\n          character.row.addClass(\"end\");\r\n        }else{\r\n          character.row.removeClass(\"end\");\r\n        }\r\n      }\r\n    }\r\n    $(\"#initiative table\").colResizable({partialRefresh: true});\r\n  }else{\r\n    ddf.roomState.roundTimeData = refreshData.roundTimeData;\r\n    ddf.roomState.ini_characters = ddf.util.hashSort(ddf.roomState.ini_characters, (obj) => {return obj.data.initiative});\r\n    for(key in ddf.roomState.ini_characters){\r\n      var character = ddf.roomState.ini_characters[key];\r\n      if(character != undefined){\r\n        if(character.data.type != \"characterData\" && character.data.createRound && character.data.timeRange){\r\n          if(parseInt(character.data.createRound) + parseInt(character.data.timeRange) <= ddf.roomState.roundTimeData.round){\r\n            character.row.children(\"td:eq(0)\").text(character.data.initiative==ddf.roomState.roundTimeData.initiative?\"×\":\"\");\r\n          }else{\r\n            character.row.children(\"td:eq(0)\").text(character.data.initiative==ddf.roomState.roundTimeData.initiative?\"●\":\"\");\r\n          }\r\n        }else{\r\n          character.row.children(\"td:eq(0)\").text(character.data.initiative==ddf.roomState.roundTimeData.initiative?\"●\":\"\");\r\n        }\r\n        $(\"#initiative table tbody tr:eq(0)\").before(\r\n          character.row\r\n        );\r\n        if(character.data.initiative < 0 && Math.round((character.data.initiative % 1)*10) >= -0.1){\r\n          character.row.children(\"td:eq(1)\").children(\"input\").val(Math.ceil(character.data.initiative));\r\n          character.row.children(\"td:eq(2)\").children(\"input\").val(Math.round(character.data.initiative*100 % 100));\r\n        }else if(character.data.initiative < 0){\r\n          character.row.children(\"td:eq(1)\").children(\"input\").val(Math.floor(character.data.initiative));\r\n          character.row.children(\"td:eq(2)\").children(\"input\").val(Math.round(character.data.initiative*100 % 100)+100);\r\n        }else if(Math.round((character.data.initiative % 1) * 10) >= 9){\r\n          character.row.children(\"td:eq(1)\").children(\"input\").val(Math.ceil(character.data.initiative));\r\n          character.row.children(\"td:eq(2)\").children(\"input\").val(Math.round(character.data.initiative*100 % 100 - 100));\r\n        }else{\r\n          character.row.children(\"td:eq(1)\").children(\"input\").val(Math.floor(character.data.initiative));\r\n          character.row.children(\"td:eq(2)\").children(\"input\").val(Math.round(character.data.initiative*100 % 100));\r\n        }\r\n        character.row.children(\"td:eq(3)\").text(character.data.name);\r\n        count = 0;\r\n        for(counter of ddf.roomState.roundTimeData.counterNames){\r\n          character.data.counters == null && (character.data.counters = {});\r\n          character.data.statusAlias == null && (character.data.statusAlias = {});\r\n          character.data.counters[counter]==undefined && (character.data.counters[counter] = 0);\r\n          if(/^\\*/.test(counter)){\r\n            if(character.data.type != \"characterData\"){\r\n            }else if(character.data.statusAlias && character.data.statusAlias[counter]){\r\n              character.row.children(`td:eq(${4 + count})`).html(`<input class=\"v${count}\" type=\"checkbox\" ${(character.data.counters[counter]!=0?\"checked\":\"\")}>${character.data.statusAlias[counter]?character.data.statusAlias[counter]:\"\"}`);\r\n            }else{\r\n              character.row.children(`td:eq(${4 + count})`).html(`<input class=\"v${count}\" type=\"checkbox\" ${(character.data.counters[counter]!=0?\"checked\":\"\")}>`);\r\n            }\r\n          }else{\r\n            character.row.children(`td:eq(${4 + count})`).children(\"input\").val(character.data.counters[counter]);\r\n          }\r\n          count++;\r\n        }\r\n        character.row.children(\"td:last\").children(\"input\").val(encode(character.data.info));\r\n      }\r\n      if(character.data.type != \"characterData\"){\r\n        if(parseInt(character.data.createRound) + parseInt(character.data.timeRange) < ddf.roomState.roundTimeData.round ||\r\n          (parseInt(character.data.createRound) + parseInt(character.data.timeRange) == ddf.roomState.roundTimeData.round &&\r\n           parseFloat(character.data.initiative) >= ddf.roomState.roundTimeData.initiative)){\r\n          character.row.addClass(\"end\");\r\n        }else{\r\n          character.row.removeClass(\"end\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n  $(\"#round\").text(ddf.roomState.roundTimeData.round);\r\n  $(\"#now_ini\").text(ddf.roomState.roundTimeData.initiative);\r\n}\r\n\r\nddf.cmd.sendChatMessage = sendChatMessage;\r\nfunction sendChatMessage(channel, senderName, state, gameType, message, color, isNeedResult = true){\r\n  ddf.roomState.gameType = gameType;\r\n  if(message.trim()==\"\"){return false;}\r\n  if(!(pattern = ddf.patterns[ddf.roomState.gameType])){\r\n    dicebot = ddf.info.diceBotInfos.find((r) => {return r.gameType == ddf.roomState.gameType});\r\n    pattern = [].concat(\r\n      ddf.info.diceBotInfos.find((r) => {return r.gameType == \"BaseDiceBot\"}).prefixs,\r\n      dicebot?dicebot.prefixs:[],\r\n    ).map((r) => {return new RegExp(\"^((\\\\d+)\\\\s+)?(S?\"+r+\"[^\\\\s]*)\", \"i\");});\r\n    ddf.patterns[ddf.roomState.gameType] = pattern;\r\n  }\r\n  var match;\r\n  if(!!pattern.find((r) => {return !!(match = r.exec(toHalf(message)));})){\r\n    //DiceBotMessage\r\n    ddf.userState.name = senderName;\r\n    saveUserState();\r\n    return ddf.sendDiceBotChatMessage(channel, senderName, state, match[2]?match[2]:0, match[3], color, ddf.roomState.gameType, isNeedResult);\r\n  }else{\r\n    //ChatMessage\r\n    /*version = /^Ver\\.\\d+\\.(\\d+\\.\\d+\\.?\\d*)\\(/.exec(ddf.info.version);\r\n    if(compareVersion(version[1], '48.32.1') < 0 && /^###CutInCommand:/.test(message)){\r\n      message = \"Wrong Message -> \" + message;\r\n    }*/\r\n    if(/^###CutInCommand:/.test(message)){\r\n      message = \"Wrong Message -> \" + message;\r\n    }\r\n    ddf.userState.name = senderName;\r\n    saveUserState();\r\n    return ddf.sendChatMessage(channel, senderName + \"\\t\"+ state, message, color);\r\n  }\r\n}\r\n\r\nddf.cmd.saveUserState = saveUserState;\r\nfunction saveUserState(){\r\n  chatPalette = {};\r\n  for(item in ddf.userState.chatPalette){\r\n    chatPalette[item] = {};\r\n    for(item2 in ddf.userState.chatPalette[item]){\r\n      if(ddf.userState.chatPalette[item][item2]){\r\n        chatPalette[item][item2] = ddf.userState.chatPalette[item][item2];\r\n      }\r\n    }\r\n  }\r\n  store.set('userState', {\r\n    name: ddf.userState.name,\r\n    own: ddf.userState.own,\r\n    chatColor: ddf.userState.chatColor,\r\n    showTime: ddf.userState.showTime,\r\n    chatPalette: chatPalette,\r\n    fontSize: ddf.userState.fontSize,\r\n  });\r\n}\r\n\r\n\r\nddf.cmd.clearUserState = clearUserState;\r\nfunction clearUserState(){\r\n  store.clearAll();\r\n  //クリア後はリロードが必要。\r\n}\r\n\r\nfunction getPath(type, size, gridInterval){\r\n  return `polygon(${pathList[type][size].map((v,k)=>{return `${v[0]*gridInterval}px ${v[1]*gridInterval}px`;})})`;\r\n}\r\n\r\nvar pathList = {\r\n  corn1: [[],\r\n          [[0,0],[50,0],[50,50],[0,50]],\r\n          [[0,0],[50,0],[100,50],[100,100],[0,100]],\r\n          [[0,0],[50,0],[150,100],[150,150],[0,150]],\r\n          [[0,0],[50,0],[150,50],[200,150],[200,200],[0,200]],\r\n          [[0,0],[50,0],[150,50],[200,100],[250,200],[250,250],[0,250]],\r\n          [[0,0],[50,0],[150,50],[250,150],[300,250],[300,300],[0,300]],\r\n          [[0,0],[50,0],[250,100],[350,300],[350,350],[0,350]],\r\n          [[0,0],[50,0],[250,100],[300,150],[400,350],[400,400],[0,400]],\r\n          [[0,0],[50,0],[250,100],[350,200],[450,400],[450,450],[0,450]],\r\n          [[0,0],[50,0],[350,150],[500,450],[500,500],[0,500]],\r\n          [[0,0],[50,0],[350,150],[400,200],[550,500],[550,550],[0,550]],\r\n          [[0,0],[50,0],[350,150],[450,250],[600,550],[600,600],[0,600]],\r\n          [[0,0],[50,0],[450,200],[650,600],[650,650],[0,650]],\r\n          [[0,0],[50,0],[450,200],[500,250],[700,650],[700,700],[0,700]],\r\n          [[0,0],[50,0],[450,200],[550,300],[750,700],[750,750],[0,750]],\r\n          [[0,0],[50,0],[550,250],[800,750],[800,800],[0,800]],\r\n          [[0,0],[50,0],[550,250],[600,300],[850,800],[850,850],[0,850]],\r\n          [[0,0],[50,0],[550,250],[650,350],[900,850],[900,900],[0,900]],\r\n          [[0,0],[50,0],[650,300],[950,900],[950,950],[0,950]],\r\n          [[0,0],[50,0],[650,300],[700,350],[1000,950],[1000,1000],[0,1000]],\r\n          ],\r\n  corn2: [[],\r\n          [[0,0],[50,0],[50,100],[0,100]],\r\n          [[0,0],[100,0],[100,100],[0,100]],\r\n          [[0,50],[50,0],[100,0],[150,50],[150,150],[100,200],[50,200],[0,150]],\r\n          [[0,100],[100,0],[150,0],[200,100],[200,200],[150,300],[100,300],[0,200]],\r\n          [[0,100],[100,0],[200,0],[250,100],[250,200],[200,300],[100,300],[0,200]],\r\n          [[0,150],[150,0],[225,0],[300,150],[300,250],[225,400],[150,400],[0,250]],\r\n          [[0,200],[200,0],[250,0],[350,200],[350,300],[250,500],[200,500],[0,300]],\r\n          [[0,200],[200,0],[300,0],[400,200],[400,300],[300,500],[200,500],[0,300]],\r\n          [[0,250],[250,0],[325,0],[450,250],[450,350],[325,600],[250,600],[0,350]],\r\n          [[0,300],[300,0],[350,0],[500,300],[500,400],[350,700],[300,700],[0,400]],\r\n          [[0,300],[300,0],[400,0],[550,300],[550,400],[400,700],[300,700],[0,400]],\r\n          [[0,350],[350,0],[425,0],[600,350],[600,450],[425,800],[350,800],[0,450]],\r\n          [[0,400],[400,0],[450,0],[650,400],[650,500],[450,900],[400,900],[0,500]],\r\n          [[0,400],[400,0],[500,0],[700,400],[700,500],[500,900],[400,900],[0,500]],\r\n          [[0,450],[450,0],[525,0],[750,450],[750,550],[525,1000],[450,1000],[0,550]],\r\n          [[0,500],[500,0],[550,0],[800,500],[800,600],[550,1100],[500,1100],[0,600]],\r\n          [[0,500],[500,0],[600,0],[850,500],[850,600],[600,1100],[500,1100],[0,600]],\r\n          [[0,550],[550,0],[625,0],[900,550],[900,650],[625,1200],[550,1200],[0,650]],\r\n          [[0,600],[600,0],[650,0],[950,600],[950,700],[650,1300],[600,1300],[0,700]],\r\n          [[0,600],[600,0],[700,0],[1000,600],[1000,700],[700,1300],[600,1300],[0,700]]\r\n          ],\r\n  corn3: [[],\r\n          [[0,0],[0,50],[50,50],[50,0]],\r\n          [[0,0],[100,0],[100,50],[50,100],[0,100]],\r\n          [[0,0],[150,0],[150,50],[50,150],[0,150]],\r\n          [[0,0],[200,0],[200,50],[150,150],[50,200],[0,200]],\r\n          [[0,0],[250,0],[250,50],[200,150],[150,200],[50,250],[0,250]],\r\n          [[0,0],[300,0],[300,50],[250,150],[150,250],[50,300],[0,300]],\r\n          [[0,0],[450,0],[350,50],[250,250],[50,350],[0,350]],\r\n          [[0,0],[400,0],[400,50],[300,250],[250,300],[50,400],[0,400]],\r\n          [[0,0],[450,0],[450,50],[350,250],[250,350],[50,450],[0,450]],\r\n          [[0,0],[500,0],[500,50],[350,350],[50,500],[0,500]],\r\n          [[0,0],[550,0],[550,50],[400,350],[350,400],[50,550],[0,550]],\r\n          [[0,0],[600,0],[600,50],[450,350],[350,450],[50,600],[0,600]],\r\n          [[0,0],[650,0],[650,50],[450,450],[50,650],[0,650]],\r\n          [[0,0],[700,0],[700,50],[500,450],[450,500],[50,700],[0,700]],\r\n          [[0,0],[750,0],[750,50],[550,450],[450,550],[50,750],[0,750]],\r\n          [[0,0],[800,0],[800,50],[550,550],[50,800],[0,800]],\r\n          [[0,0],[850,0],[850,50],[600,550],[550,600],[50,850],[0,850]],\r\n          [[0,0],[900,0],[900,50],[650,550],[550,650],[50,900],[0,900]],\r\n          [[0,0],[950,0],[950,50],[650,650],[50,950],[0,950]],\r\n          [[0,0],[1000,0],[1000,50],[700,650],[650,700],[50,1000],[0,1000]],\r\n          ],\r\n  corn4: [[],\r\n          [[0,0],[0,50],[100,50],[100,0]],\r\n          [[0,0],[0,100],[100,100],[100,0]],\r\n          [[50,0],[0,50],[0,100],[50,150],[150,150],[200,100],[200,50],[150,0]],\r\n          [[100,0],[0,100],[0,150],[100,200],[200,200],[300,150],[300,100],[200,0]],\r\n          [[100,0],[0,100],[0,200],[100,250],[200,250],[300,200],[300,100],[200,0]],\r\n          [[150,0],[0,150],[0,225],[150,300],[250,300],[400,225],[400,150],[250,0]],\r\n          [[200,0],[0,200],[0,250],[200,350],[300,350],[500,250],[500,200],[300,0]],\r\n          [[200,0],[0,200],[0,300],[200,400],[300,400],[500,300],[500,200],[300,0]],\r\n          [[250,0],[0,250],[0,325],[250,450],[350,450],[600,325],[600,250],[350,0]],\r\n          [[300,0],[0,300],[0,350],[300,500],[400,500],[700,350],[700,300],[400,0]],\r\n          [[300,0],[0,300],[0,400],[300,550],[400,550],[700,400],[700,300],[400,0]],\r\n          [[350,0],[0,350],[0,425],[350,600],[450,600],[800,425],[800,350],[450,0]],\r\n          [[400,0],[0,400],[0,450],[400,650],[500,650],[900,450],[900,400],[500,0]],\r\n          [[400,0],[0,400],[0,500],[400,700],[500,700],[900,500],[900,400],[500,0]],\r\n          [[450,0],[0,450],[0,525],[450,750],[550,750],[1000,525],[1000,450],[550,0]],\r\n          [[500,0],[0,500],[0,550],[500,800],[600,800],[1100,550],[1100,500],[600,0]],\r\n          [[500,0],[0,500],[0,600],[500,850],[600,850],[1100,600],[1100,500],[600,0]],\r\n          [[550,0],[0,550],[0,625],[550,900],[650,900],[1200,625],[1200,550],[650,0]],\r\n          [[600,0],[0,600],[0,650],[600,950],[700,950],[1300,650],[1300,600],[700,0]],\r\n          [[600,0],[0,600],[0,700],[600,1000],[700,1000],[1300,700],[1300,600],[700,0]],\r\n          ],\r\n  corn5: [[],\r\n          [[0,0],[50,0],[50,50],[0,50]],\r\n          [[0,0],[100,0],[100,100],[50,100],[0,50]],\r\n          [[0,0],[150,0],[150,150],[100,150],[0,50]],\r\n          [[0,0],[200,0],[200,200],[150,200],[50,150],[0,50]],\r\n          [[0,0],[250,0],[250,250],[200,250],[100,200],[50,150],[0,50]],\r\n          [[0,0],[300,0],[300,300],[250,300],[150,250],[50,150],[0,50]],\r\n          [[0,0],[450,0],[350,350],[300,350],[100,250],[0,50]],\r\n          [[0,0],[400,0],[400,400],[350,400],[150,300],[100,250],[0,50]],\r\n          [[0,0],[450,0],[450,450],[400,450],[200,350],[100,250],[0,50]],\r\n          [[0,0],[500,0],[500,500],[450,500],[150,350],[0,50]],\r\n          [[0,0],[550,0],[550,550],[500,550],[200,400],[150,350],[0,50]],\r\n          [[0,0],[600,0],[600,600],[550,600],[250,450],[150,350],[0,50]],\r\n          [[0,0],[650,0],[650,650],[600,650],[200,450],[0,50]],\r\n          [[0,0],[700,0],[700,700],[650,700],[250,500],[200,450],[0,50]],\r\n          [[0,0],[750,0],[750,750],[700,750],[300,550],[200,450],[0,50]],\r\n          [[0,0],[800,0],[800,800],[750,800],[250,550],[0,50]],\r\n          [[0,0],[850,0],[850,850],[800,850],[300,600],[250,550],[0,50]],\r\n          [[0,0],[900,0],[900,900],[850,900],[350,650],[250,550],[0,50]],\r\n          [[0,0],[950,0],[950,950],[900,950],[300,650],[0,50]],\r\n          [[0,0],[1000,0],[1000,1000],[950,1000],[350,700],[300,650],[0,50]],\r\n          ],\r\n  corn6: [[],\r\n          [[0,0],[50,0],[50,100],[0,100]],\r\n          [[0,0],[100,0],[100,100],[0,100]],\r\n          [[0,50],[50,0],[100,0],[150,50],[150,150],[100,200],[50,200],[0,150]],\r\n          [[0,100],[50,0],[100,0],[200,100],[200,200],[100,300],[50,300],[0,200]],\r\n          [[0,100],[50,0],[150,0],[250,100],[250,200],[150,300],[50,300],[0,200]],\r\n          [[0,150],[75,0],[150,0],[300,150],[300,250],[150,400],[75,400],[0,250]],\r\n          [[0,200],[100,0],[150,0],[350,200],[350,300],[150,500],[100,500],[0,300]],\r\n          [[0,200],[100,0],[200,0],[400,200],[400,300],[200,500],[100,500],[0,300]],\r\n          [[0,250],[125,0],[200,0],[450,250],[450,350],[200,600],[125,600],[0,350]],\r\n          [[0,300],[150,0],[200,0],[500,300],[500,400],[200,700],[150,700],[0,400]],\r\n          [[0,300],[150,0],[250,0],[550,300],[550,400],[250,700],[150,700],[0,400]],\r\n          [[0,350],[175,0],[250,0],[600,350],[600,450],[250,800],[175,800],[0,450]],\r\n          [[0,400],[200,0],[250,0],[650,400],[650,500],[250,900],[200,900],[0,500]],\r\n          [[0,400],[200,0],[300,0],[700,400],[700,500],[300,900],[200,900],[0,500]],\r\n          [[0,450],[225,0],[300,0],[750,450],[750,550],[300,1000],[225,1000],[0,550]],\r\n          [[0,500],[250,0],[300,0],[800,500],[800,600],[300,1100],[250,1100],[0,600]],\r\n          [[0,500],[250,0],[350,0],[850,500],[850,600],[350,1100],[250,1100],[0,600]],\r\n          [[0,550],[275,0],[350,0],[900,550],[900,650],[350,1200],[275,1200],[0,650]],\r\n          [[0,600],[300,0],[350,0],[950,600],[950,700],[350,1300],[300,1300],[0,700]],\r\n          [[0,600],[300,0],[400,0],[1000,600],[1000,700],[400,1300],[300,1300],[0,700]]\r\n          ],\r\n  corn7: [[],\r\n          [[0,0],[50,0],[50,50],[0,50]],\r\n          [[50,0],[100,0],[100,100],[0,100],[0,50]],\r\n          [[100,0],[150,0],[150,150],[0,150],[0,100]],\r\n          [[150,0],[200,0],[200,200],[0,200],[0,150],[50,50]],\r\n          [[200,0],[250,0],[250,250],[0,250],[0,200],[50,100],[100,50]],\r\n          [[250,0],[300,0],[300,300],[0,300],[0,250],[50,150],[150,50]],\r\n          [[300,0],[450,0],[350,350],[0,350],[0,300],[100,100]],\r\n          [[350,0],[400,0],[400,400],[0,400],[0,350],[100,150],[150,100]],\r\n          [[400,0],[450,0],[450,450],[0,450],[0,400],[100,200],[200,100]],\r\n          [[450,0],[500,0],[500,500],[0,500],[0,450],[150,150]],\r\n          [[500,0],[550,0],[550,550],[0,550],[0,500],[150,200],[200,150]],\r\n          [[550,0],[600,0],[600,600],[0,600],[0,550],[150,250],[250,150]],\r\n          [[600,0],[650,0],[650,650],[0,650],[0,600],[200,200]],\r\n          [[650,0],[700,0],[700,700],[0,700],[0,650],[200,250],[250,200]],\r\n          [[700,0],[750,0],[750,750],[0,750],[0,700],[200,300],[300,200]],\r\n          [[750,0],[800,0],[800,800],[0,800],[0,750],[250,250]],\r\n          [[800,0],[850,0],[850,850],[0,850],[0,800],[250,300],[300,250]],\r\n          [[850,0],[900,0],[900,900],[0,900],[0,850],[250,350],[350,250]],\r\n          [[900,0],[950,0],[950,950],[0,950],[0,900],[300,300]],\r\n          [[950,0],[1000,0],[1000,1000],[0,1000],[0,950],[300,350],[350,300]],\r\n          ],\r\n  corn8: [[],\r\n          [[0,0],[0,50],[100,50],[100,0]],\r\n          [[0,0],[0,100],[100,100],[100,0]],\r\n          [[50,0],[0,50],[0,100],[50,150],[150,150],[200,100],[200,50],[150,0]],\r\n          [[100,0],[0,50],[0,100],[100,200],[200,200],[300,100],[300,50],[200,0]],\r\n          [[100,0],[0,50],[0,150],[100,250],[200,250],[300,150],[300,50],[200,0]],\r\n          [[150,0],[0,75],[0,150],[150,300],[250,300],[400,150],[400,75],[250,0]],\r\n          [[200,0],[0,100],[0,150],[200,350],[300,350],[500,150],[500,100],[300,0]],\r\n          [[200,0],[0,100],[0,200],[200,400],[300,400],[500,200],[500,100],[300,0]],\r\n          [[250,0],[0,125],[0,200],[250,450],[350,450],[600,200],[600,125],[350,0]],\r\n          [[300,0],[0,150],[0,200],[300,500],[400,500],[700,200],[700,150],[400,0]],\r\n          [[300,0],[0,150],[0,250],[300,550],[400,550],[700,250],[700,150],[400,0]],\r\n          [[350,0],[0,175],[0,250],[350,600],[450,600],[800,250],[800,175],[450,0]],\r\n          [[400,0],[0,200],[0,250],[400,650],[500,650],[900,250],[900,200],[500,0]],\r\n          [[400,0],[0,200],[0,300],[400,700],[500,700],[900,300],[900,200],[500,0]],\r\n          [[450,0],[0,225],[0,300],[450,750],[550,750],[1000,300],[1000,225],[550,0]],\r\n          [[500,0],[0,250],[0,300],[500,800],[600,800],[1100,300],[1100,250],[600,0]],\r\n          [[500,0],[0,250],[0,350],[500,850],[600,850],[1100,350],[1100,250],[600,0]],\r\n          [[550,0],[0,275],[0,350],[550,900],[650,900],[1200,350],[1200,275],[650,0]],\r\n          [[600,0],[0,300],[0,350],[600,950],[700,950],[1300,350],[1300,300],[700,0]],\r\n          [[600,0],[0,300],[0,400],[600,1000],[700,1000],[1300,400],[1300,300],[700,0]]\r\n          ],\r\n  circle: [[],\r\n          [[0,0],[100,0],[100,100],[0,100]],\r\n          [[0,50],[50,0],[150,0],[200,50],[200,150],[150,200],[50,200],[0,150]],\r\n          [[0,100],[100,0],[200,0],[300,100],[300,200],[200,300],[100,300],[0,200]],\r\n          [[0,150],[50,50],[150,0],[250,0],[350,50],[400,150],[400,250],[350,350],[250,400],[150,400],[50,350],[0,250]],\r\n          [[0,200],[50,100],[100,50],[200,0],[300,0],[400,50],[450,100],[500,200],[500,300],[450,400],[400,450],[300,500],[200,500],[100,450],[50,400],[0,300]],\r\n          [[0,250],[50,150],[150,50],[250,0],[350,0],[450,50],[550,150],[600,250],[600,350],[550,450],[450,550],[350,600],[250,600],[150,550],[50,450],[0,350]],\r\n          [[0,300],[100,100],[300,0],[400,0],[600,100],[700,300],[700,400],[600,600],[400,700],[300,700],[100,600],[0,400]],\r\n          [[0,350],[100,150],[150,100],[350,0],[450,0],[650,100],[700,150],[800,350],[800,450],[700,650],[650,700],[450,800],[350,800],[150,700],[100,650],[0,450]],\r\n          [[0,400],[100,200],[200,100],[400,0],[500,0],[700,100],[800,200],[900,400],[900,500],[800,700],[700,800],[500,900],[400,900],[200,800],[100,700],[0,500]],\r\n          [[0,450],[150,150],[450,0],[550,0],[850,150],[1000,450],[1000,550],[850,850],[550,1000],[450,1000],[150,850],[0,550]],\r\n          [[0,500],[150,200],[200,150],[500,0],[600,0],[900,150],[950,200],[1100,500],[1100,600],[950,900],[900,950],[600,1100],[500,1100],[200,950],[150,900],[0,600]],\r\n          [[0,550],[150,250],[250,150],[550,0],[650,0],[950,150],[1050,250],[1200,550],[1200,650],[1050,950],[950,1050],[650,1200],[550,1200],[250,1050],[150,950],[0,650]],\r\n          [[0,600],[200,200],[600,0],[700,0],[1100,200],[1300,600],[1300,700],[1100,1100],[700,1300],[600,1300],[200,1100],[0,700]],\r\n          [[0,650],[200,250],[250,200],[650,0],[750,0],[1150,200],[1200,250],[1400,650],[1400,750],[1200,1150],[1150,1200],[750,1400],[650,1400],[250,1200],[200,1150],[0,750]],\r\n          [[0,700],[200,300],[300,200],[700,0],[800,0],[1200,200],[1300,300],[1500,700],[1500,800],[1300,1200],[1200,1300],[800,1500],[700,1500],[300,1300],[200,1200],[0,800]],\r\n          [[0,750],[250,250],[750,0],[850,0],[1350,250],[1600,750],[1600,850],[1350,1350],[850,1600],[750,1600],[250,1350],[0,850]],\r\n          [[0,800],[250,300],[300,250],[800,0],[900,0],[1400,250],[1450,300],[1700,800],[1700,900],[1450,1400],[1400,1450],[900,1700],[800,1700],[300,1450],[250,1400],[0,900]],\r\n          [[0,850],[250,350],[350,250],[850,0],[950,0],[1450,250],[1550,350],[1800,850],[1800,950],[1550,1450],[1450,1550],[950,1800],[850,1800],[350,1550],[250,1450],[0,950]],\r\n          [[0,900],[300,300],[900,0],[1000,0],[1600,300],[1900,900],[1900,1000],[1600,1600],[1000,1900],[900,1900],[300,1600],[0,1000]],\r\n          [[0,950],[300,350],[350,300],[950,0],[1050,0],[1650,300],[1700,350],[2000,950],[2000,1050],[1700,1650],[1650,1700],[1050,2000],[950,2000],[350,1700],[300,1650],[0,1050]]\r\n          ],\r\n};\r\n"],"file":"../index.js"}